{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/TruthMachine/hello-world-part-four-tutorial/starter-files/src/util/interact.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire(\"dotenv\").config();\n\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\n\nconst {\n  createAlchemyWeb3\n} = require(\"@alch/alchemy-web3\");\n\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nconst contractABI = require(\"../contract-abi.json\");\n\nconst contractAddress = \"0x2aa06a5B99b4969AE575cf64E71D32418D045202\";\nexport const helloWorldContract = new web3.eth.Contract(contractABI, contractAddress);\nexport const submitTruth = async (address, message, url) => {\n  //input error handling\n  if (!window.ethereum || address === null) {\n    return {\n      status: \"💡 Connect your Metamask wallet to update the message on the blockchain.\"\n    };\n  }\n\n  if (message.trim() === \"\") {\n    return {\n      status: \"❌ Your message cannot be an empty string.\"\n    };\n  } //set up transaction parameters\n\n\n  const transactionParameters = {\n    to: contractAddress,\n    // Required except during contract publications.\n    from: address,\n    // must match user's active address.\n    data: helloWorldContract.methods.submitTruth(url, message).encodeABI()\n  }; //sign the transaction\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters]\n    });\n    return {\n      status: \"SUCCESS\"\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message\n    };\n  }\n};\nexport const mintVoters = async (address, toaddress) => {\n  //input error handling\n  if (!window.ethereum || address === null) {\n    return {\n      status: \"💡 Connect your Metamask wallet to update the message on the blockchain.\"\n    };\n  }\n\n  if (toaddress.trim() === \"\") {\n    return {\n      status: \"❌ Your message cannot be an empty string.\"\n    };\n  } //set up transaction parameters\n\n\n  const transactionParameters = {\n    to: contractAddress,\n    // Required except during contract publications.\n    from: address,\n    // must match user's active address.\n    data: helloWorldContract.methods.mintVoters(toaddress).encodeABI()\n  }; //sign the transaction\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters]\n    });\n    return {\n      status: \"SUCCESS\"\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message\n    };\n  }\n};\nexport const voteTruth = async (address, truthid, bool) => {\n  //input error handling\n  if (!window.ethereum || address === null) {\n    return {\n      status: \"💡 Connect your Metamask wallet to update the message on the blockchain.\"\n    };\n  }\n\n  if (truthid.trim() === \"\") {\n    return {\n      status: \"❌ Your id cannot be an empty string.\"\n    };\n  } //set up transaction parameters\n\n\n  const transactionParameters = {\n    to: contractAddress,\n    // Required except during contract publications.\n    from: address,\n    // must match user's active address.\n    data: helloWorldContract.methods.voteTruth(truthid, bool).encodeABI()\n  }; //sign the transaction\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters]\n    });\n    return {\n      status: \"SUCCESS\",\n      newTruthTitle: txHash\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message\n    };\n  }\n};\nexport const tallyVotesVerifyTruth = async (address, truthid) => {\n  //input error handling\n  if (!window.ethereum || address === null) {\n    return {\n      status: \"💡 Connect your Metamask wallet to update the message on the blockchain.\"\n    };\n  }\n\n  if (truthid.trim() === \"\") {\n    return {\n      status: \"❌ Your id cannot be an empty string.\"\n    };\n  } //set up transaction parameters\n\n\n  const transactionParameters = {\n    to: contractAddress,\n    // Required except during contract publications.\n    from: address,\n    // must match user's active address.\n    data: helloWorldContract.methods.tallyVotesVerifyTruth(truthid).encodeABI()\n  }; //sign the transaction\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters]\n    });\n    return {\n      status: \"SUCCESS\",\n      newTruthTitle: txHash\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message\n    };\n  }\n};\nexport const returnvotes = async (address, truthid) => {\n  //input error handling\n  if (!window.ethereum || address === null) {\n    return {\n      status: \"💡 Connect your Metamask wallet to update the message on the blockchain.\"\n    };\n  }\n\n  if (truthid.trim() === \"\") {\n    return {\n      status: \"❌ Your message cannot be an empty string.\"\n    };\n  } //set up transaction parameters\n\n\n  const transactionParameters = {\n    to: contractAddress,\n    // Required except during contract publications.\n    from: address,\n    // must match user's active address.\n    data: helloWorldContract.methods.returnvotes(truthid).encodeABI()\n  }; //sign the transaction\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters]\n    });\n    return {\n      status: \"SUCCESS\"\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message\n    };\n  }\n}; //const truth = await helloWorldContract.methods.viewTruth(truthid).call();\n//    return truth;\n\nexport const viewTruth = async (address, truthid) => {\n  //input error handling\n  if (!window.ethereum || address === null) {\n    return {\n      status: \"💡 Connect your Metamask wallet to update the message on the blockchain.\"\n    };\n  }\n\n  if (truthid.trim() === \"\") {\n    return {\n      status: \"❌ Your id cannot be an empty string.\"\n    };\n  } //set up transaction parameters\n\n\n  const transactionParameters = {\n    to: contractAddress,\n    // Required except during contract publications.\n    from: address,\n    // must match user's active address.\n    data: helloWorldContract.methods.viewTruth(truthid).encodeABI()\n  }; //sign the transaction\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters]\n    });\n    return {\n      status: \"SUCCESS\"\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message\n    };\n  }\n};\nexport const viewTitle = async (address, truthid) => {\n  //input error handling\n  if (!window.ethereum || address === null) {\n    return {\n      status: \"💡 Connect your Metamask wallet to update the message on the blockchain.\"\n    };\n  }\n\n  if (truthid.trim() === \"\") {\n    return {\n      status: \"❌ Your id cannot be an empty string.\"\n    };\n  } //set up transaction parameters\n\n\n  const transactionParameters = {\n    to: contractAddress,\n    // Required except during contract publications.\n    from: address,\n    // must match user's active address.\n    data: helloWorldContract.methods.viewTitle(truthid).encodeABI()\n  }; //sign the transaction\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters]\n    });\n    return {\n      status: \"SUCCESS\",\n      newTruthTitle: txHash\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message\n    };\n  }\n};\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0]\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download.html`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 11\n      }, this)\n    };\n  }\n};\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\"\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download.html`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 11\n      }, this)\n    };\n  }\n};","map":{"version":3,"names":["require","config","alchemyKey","process","env","REACT_APP_ALCHEMY_KEY","createAlchemyWeb3","web3","contractABI","contractAddress","helloWorldContract","eth","Contract","submitTruth","address","message","url","window","ethereum","status","trim","transactionParameters","to","from","data","methods","encodeABI","txHash","request","method","params","error","mintVoters","toaddress","voteTruth","truthid","bool","newTruthTitle","tallyVotesVerifyTruth","returnvotes","viewTruth","viewTitle","connectWallet","addressArray","obj","err","getCurrentWalletConnected","length"],"sources":["/home/user/Desktop/TruthMachine/hello-world-part-four-tutorial/starter-files/src/util/interact.js"],"sourcesContent":["require(\"dotenv\").config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nconst contractABI = require(\"../contract-abi.json\");\nconst contractAddress = \"0x2aa06a5B99b4969AE575cf64E71D32418D045202\";\n\nexport const helloWorldContract = new web3.eth.Contract(\n  contractABI,\n  contractAddress\n);\n\n\nexport const submitTruth = async (address, message, url) => {\n\n    //input error handling\n    if (!window.ethereum || address === null) {\n      return {\n        status:\n          \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\n      };\n    }\n  \n    if (message.trim() === \"\") {\n      return {\n        status: \"❌ Your message cannot be an empty string.\",\n      };\n    }\n  \n    //set up transaction parameters\n    const transactionParameters = {\n      to: contractAddress, // Required except during contract publications.\n      from: address, // must match user's active address.\n      data: helloWorldContract.methods.submitTruth(url, message).encodeABI(),\n    };\n  \n    //sign the transaction\n    try {\n      const txHash = await window.ethereum.request({\n        method: \"eth_sendTransaction\",\n        params: [transactionParameters],\n      });\n      return {\n        status:\"SUCCESS\",\n      };\n    } catch (error) {\n      return {\n        status: \"😥 \" + error.message,\n      };\n    }\n};\n\nexport const mintVoters = async (address, toaddress) => {\n\n  //input error handling\n  if (!window.ethereum || address === null) {\n    return {\n      status:\n        \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\n    };\n  }\n\n  if (toaddress.trim() === \"\") {\n    return {\n      status: \"❌ Your message cannot be an empty string.\",\n    };\n  }\n\n  //set up transaction parameters\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: address, // must match user's active address.\n    data: helloWorldContract.methods.mintVoters(toaddress).encodeABI(),\n  };\n\n  //sign the transaction\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    return {\n      status:\"SUCCESS\",\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message,\n    };\n  }\n};\n\nexport const voteTruth = async (address, truthid, bool) => {\n\n  //input error handling\n  if (!window.ethereum || address === null) {\n    return {\n      status:\n        \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\n    };\n  }\n\n  if (truthid.trim() === \"\") {\n    return {\n      status: \"❌ Your id cannot be an empty string.\",\n    };\n  }\n\n  //set up transaction parameters\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: address, // must match user's active address.\n    data: helloWorldContract.methods.voteTruth(truthid, bool).encodeABI(),\n  };\n\n  //sign the transaction\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    return {\n      status: \"SUCCESS\",\n      newTruthTitle: txHash,\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message,\n    };\n  }\n\n};\nexport const tallyVotesVerifyTruth = async (address, truthid) => {\n\n  //input error handling\n  if (!window.ethereum || address === null) {\n    return {\n      status:\n        \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\n    };\n  }\n\n  if (truthid.trim() === \"\") {\n    return {\n      status: \"❌ Your id cannot be an empty string.\",\n    };\n  }\n\n  //set up transaction parameters\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: address, // must match user's active address.\n    data: helloWorldContract.methods.tallyVotesVerifyTruth(truthid).encodeABI(),\n  };\n\n  //sign the transaction\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    return {\n      status: \"SUCCESS\",\n      newTruthTitle: txHash,\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message,\n    };\n  }\n\n};\n\nexport const returnvotes = async (address, truthid) => {\n\n  //input error handling\n  if (!window.ethereum || address === null) {\n    return {\n      status:\n        \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\n    };\n  }\n\n  if (truthid.trim() === \"\") {\n    return {\n      status: \"❌ Your message cannot be an empty string.\",\n    };\n  }\n\n  //set up transaction parameters\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: address, // must match user's active address.\n    data: helloWorldContract.methods.returnvotes(truthid).encodeABI(),\n  };\n\n  //sign the transaction\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    return {\n      status:\"SUCCESS\",\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message,\n    };\n  }\n};\n\n//const truth = await helloWorldContract.methods.viewTruth(truthid).call();\n//    return truth;\n\nexport const viewTruth = async (address, truthid) => {\n\n    //input error handling\n    if (!window.ethereum || address === null) {\n      return {\n        status:\n          \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\n      };\n    }\n  \n    if (truthid.trim() === \"\") {\n      return {\n        status: \"❌ Your id cannot be an empty string.\",\n      };\n    }\n  \n    //set up transaction parameters\n    const transactionParameters = {\n      to: contractAddress, // Required except during contract publications.\n      from: address, // must match user's active address.\n      data: helloWorldContract.methods.viewTruth(truthid).encodeABI(),\n    };\n  \n    //sign the transaction\n    try {\n      const txHash = await window.ethereum.request({\n        method: \"eth_sendTransaction\",\n        params: [transactionParameters],\n      });\n      return {\n        status: \"SUCCESS\",\n      };\n    } catch (error) {\n      return {\n        status: \"😥 \" + error.message,\n      };\n    }\n\n};\n\nexport const viewTitle = async (address, truthid) => {\n\n  //input error handling\n  if (!window.ethereum || address === null) {\n    return {\n      status:\n        \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\n    };\n  }\n\n  if (truthid.trim() === \"\") {\n    return {\n      status: \"❌ Your id cannot be an empty string.\",\n    };\n  }\n\n  //set up transaction parameters\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: address, // must match user's active address.\n    data: helloWorldContract.methods.viewTitle(truthid).encodeABI(),\n  };\n\n  //sign the transaction\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    return {\n      status: \"SUCCESS\",\n      newTruthTitle: txHash,\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message,\n    };\n  }\n\n};\n\nexport const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const obj = {\n          status: \"👆🏽 Write a message in the text-field above.\",\n          address: addressArray[0],\n        };\n        return obj;\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message,\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: (\n          <span>\n            <p>\n              {\" \"}\n              🦊{\" \"}\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n                You must install Metamask, a virtual Ethereum wallet, in your\n                browser.\n              </a>\n            </p>\n          </span>\n        ),\n      };\n    }\n  };\n  \n  export const getCurrentWalletConnected = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_accounts\",\n        });\n        if (addressArray.length > 0) {\n          return {\n            address: addressArray[0],\n            status: \"👆🏽 Write a message in the text-field above.\",\n          };\n        } else {\n          return {\n            address: \"\",\n            status: \"🦊 Connect to Metamask using the top right button.\",\n          };\n        }\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message,\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: (\n          <span>\n            <p>\n              {\" \"}\n              🦊{\" \"}\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n                You must install Metamask, a virtual Ethereum wallet, in your\n                browser.\n              </a>\n            </p>\n          </span>\n        ),\n      };\n    }\n  };"],"mappings":"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"},"metadata":{},"sourceType":"module"}