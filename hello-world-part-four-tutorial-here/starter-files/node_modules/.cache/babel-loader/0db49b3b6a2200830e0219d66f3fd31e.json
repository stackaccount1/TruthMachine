{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport fetchPonyfill from \"fetch-ponyfill\";\nimport URI from \"urijs\";\nimport { delay } from \"../util/promises\";\nexport function makeRestPayloadSender(_a) {\n  var _this = this;\n\n  var url = _a.url,\n      config = _a.config; // The rest payload sender only works for alchemy.com http endpoints.\n\n  var error;\n\n  if (/^wss?:\\/\\//.test(url)) {\n    error = \"Alchemy rest endpoints are not available via websockets\";\n  }\n\n  if (!url.includes(\"alchemy\")) {\n    error = \"Alchemy specific rest endpoints are not available with a non Alchemy provider.\";\n  }\n\n  if (url.includes(\"alchemyapi.io\") && !url.includes(\"eth-\")) {\n    error = \"Alchemy specific rest endpoints on L2 networks are not available with our legacy endpoints on alchemyapi.io. Please switch over to alchemy.com\";\n  } // Don't use the native `URL` class for this. It doesn't work in React Native.\n\n\n  var urlObject = new URI(url);\n  var origin = urlObject.origin();\n  var pathname = urlObject.path();\n  var apiKey = pathname.substring(pathname.lastIndexOf(\"/\") + 1);\n  var fetch = fetchPonyfill().fetch;\n\n  var sendRestPayload = function (path, payload) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var maxRetries, retryInterval, retryJitter, endpoint, i, response, status_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (error) {\n              throw new Error(error);\n            }\n\n            maxRetries = config.maxRetries, retryInterval = config.retryInterval, retryJitter = config.retryJitter;\n            if (!(origin && apiKey)) return [3\n            /*break*/\n            , 6];\n            endpoint = new URI(origin).search(payload).path(apiKey + path).toString();\n            i = 0;\n            _a.label = 1;\n\n          case 1:\n            if (!(i < maxRetries + 1)) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , fetch(endpoint)];\n\n          case 2:\n            response = _a.sent();\n            status_1 = response.status;\n\n            switch (status_1) {\n              case 200:\n                return [2\n                /*return*/\n                , response.json()];\n\n              case 429:\n                break;\n\n              default:\n                throw new Error(response.status + \":\" + response.statusText);\n            }\n\n            return [4\n            /*yield*/\n            , delay(retryInterval + (retryJitter * Math.random() | 0))];\n\n          case 3:\n            _a.sent();\n\n            _a.label = 4;\n\n          case 4:\n            i++;\n            return [3\n            /*break*/\n            , 1];\n\n          case 5:\n            throw new Error(\"Rate limited for \" + (maxRetries + 1) + \" consecutive attempts.\");\n\n          case 6:\n            return [2\n            /*return*/\n            , Promise.resolve()];\n        }\n      });\n    });\n  };\n\n  return {\n    sendRestPayload: sendRestPayload\n  };\n}","map":{"version":3,"sources":["../../../src/web3-adapter/sendRestPayload.ts"],"names":[],"mappings":";AAAA,OAAO,aAAP,MAA0B,gBAA1B;AACA,OAAO,GAAP,MAAgB,OAAhB;AAEA,SAAS,KAAT,QAAsB,kBAAtB;AAgBA,OAAM,SAAU,qBAAV,CAAgC,EAAhC,EAGc;EAHpB,IAAA,KAAA,GAAA,IAAA;;MACE,GAAG,GAAA,EAAA,CAAA,G;MACH,MAAM,GAAA,EAAA,CAAA,M,CACY,CAClB;;EACA,IAAI,KAAJ;;EACA,IAAI,aAAa,IAAb,CAAkB,GAAlB,CAAJ,EAA4B;IAC1B,KAAK,GAAG,yDAAR;EACD;;EACD,IAAI,CAAC,GAAG,CAAC,QAAJ,CAAa,SAAb,CAAL,EAA8B;IAC5B,KAAK,GACH,gFADF;EAED;;EACD,IAAI,GAAG,CAAC,QAAJ,CAAa,eAAb,KAAiC,CAAC,GAAG,CAAC,QAAJ,CAAa,MAAb,CAAtC,EAA4D;IAC1D,KAAK,GACH,gJADF;EAED,CAbiB,CAelB;;;EACA,IAAM,SAAS,GAAG,IAAI,GAAJ,CAAQ,GAAR,CAAlB;EACA,IAAM,MAAM,GAAG,SAAS,CAAC,MAAV,EAAf;EACA,IAAM,QAAQ,GAAG,SAAS,CAAC,IAAV,EAAjB;EACA,IAAM,MAAM,GAAG,QAAQ,CAAC,SAAT,CAAmB,QAAQ,CAAC,WAAT,CAAqB,GAArB,IAA4B,CAA/C,CAAf;EAEQ,IAAA,KAAK,GAAK,aAAa,GAAlB,KAAL;;EAER,IAAM,eAAe,GAAG,UACtB,IADsB,EAEtB,OAFsB,EAEM;IAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;YAE5B,IAAI,KAAJ,EAAW;cACT,MAAM,IAAI,KAAJ,CAAU,KAAV,CAAN;YACD;;YACO,UAAU,GAAiC,MAAM,CAAvC,UAAV,EAAY,aAAa,GAAkB,MAAM,CAAxB,aAAzB,EAA2B,WAAW,GAAK,MAAM,CAAX,WAAtC;gBACJ,EAAA,MAAM,IAAI,MAAV,C,EAAA,OAAA,CAAA;YAAA;YAAA,EAAA,CAAA,CAAA;YACI,QAAQ,GAAG,IAAI,GAAJ,CAAQ,MAAR,EACd,MADc,CACP,OADO,EAEd,IAFc,CAET,MAAM,GAAG,IAFA,EAGd,QAHc,EAAX;YAIG,CAAC,GAAG,CAAJ;;;;gBAAO,EAAA,CAAC,GAAG,UAAU,GAAG,CAAjB,C,EAAkB,OAAA,CAAA;YAAA;YAAA,EAAA,CAAA,CAAA;YACf,OAAA,CAAA;YAAA;YAAA,EAAM,KAAK,CAAC,QAAD,CAAX,CAAA;;;YAAX,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX;YACE,QAAA,GAAW,QAAQ,CAAb,MAAN;;YACR,QAAQ,QAAR;cACE,KAAK,GAAL;gBACE,OAAA,CAAA;gBAAA;gBAAA,EAAO,QAAQ,CAAC,IAAT,EAAP,CAAA;;cACF,KAAK,GAAL;gBACE;;cACF;gBACE,MAAM,IAAI,KAAJ,CAAU,QAAQ,CAAC,MAAT,GAAkB,GAAlB,GAAwB,QAAQ,CAAC,UAA3C,CAAN;YANJ;;YAQA,OAAA,CAAA;YAAA;YAAA,EAAM,KAAK,CAAC,aAAa,IAAK,WAAW,GAAG,IAAI,CAAC,MAAL,EAAf,GAAgC,CAApC,CAAd,CAAX,CAAA;;;YAAA,EAAA,CAAA,IAAA;;;;;YAXkC,CAAC;;;;;;YAarC,MAAM,IAAI,KAAJ,CACJ,uBAAoB,UAAU,GAAG,CAAjC,IAAkC,wBAD9B,CAAN;;;YAIF,OAAA,CAAA;YAAA;YAAA,EAAO,OAAO,CAAC,OAAR,EAAP,CAAA;;;KA5B4B,CAAA;EA6B7B,CA/BD;;EAiCA,OAAO;IACL,eAAe,EAAA;EADV,CAAP;AAGD","sourcesContent":["import fetchPonyfill from \"fetch-ponyfill\";\nimport URI from \"urijs\";\nimport { FullConfig } from \"../types\";\nimport { delay } from \"../util/promises\";\n\nexport interface RestPayloadSender {\n  sendRestPayload: SendRestPayloadFunction;\n}\n\nexport type SendRestPayloadFunction = (\n  path: string,\n  payload: Record<string, any>,\n) => Promise<any>;\n\nexport interface RestPayloadConfig {\n  url: string;\n  config: FullConfig;\n}\n\nexport function makeRestPayloadSender({\n  url,\n  config,\n}: RestPayloadConfig): RestPayloadSender {\n  // The rest payload sender only works for alchemy.com http endpoints.\n  let error: string | undefined;\n  if (/^wss?:\\/\\//.test(url)) {\n    error = \"Alchemy rest endpoints are not available via websockets\";\n  }\n  if (!url.includes(\"alchemy\")) {\n    error =\n      \"Alchemy specific rest endpoints are not available with a non Alchemy provider.\";\n  }\n  if (url.includes(\"alchemyapi.io\") && !url.includes(\"eth-\")) {\n    error =\n      \"Alchemy specific rest endpoints on L2 networks are not available with our legacy endpoints on alchemyapi.io. Please switch over to alchemy.com\";\n  }\n\n  // Don't use the native `URL` class for this. It doesn't work in React Native.\n  const urlObject = new URI(url);\n  const origin = urlObject.origin();\n  const pathname = urlObject.path();\n  const apiKey = pathname.substring(pathname.lastIndexOf(\"/\") + 1);\n\n  const { fetch } = fetchPonyfill();\n\n  const sendRestPayload = async (\n    path: string,\n    payload: Record<string, any>,\n  ): Promise<any> => {\n    if (error) {\n      throw new Error(error);\n    }\n    const { maxRetries, retryInterval, retryJitter } = config;\n    if (origin && apiKey) {\n      const endpoint = new URI(origin)\n        .search(payload)\n        .path(apiKey + path)\n        .toString();\n      for (let i = 0; i < maxRetries + 1; i++) {\n        const response = await fetch(endpoint);\n        const { status } = response;\n        switch (status) {\n          case 200:\n            return response.json();\n          case 429:\n            break;\n          default:\n            throw new Error(response.status + \":\" + response.statusText);\n        }\n        await delay(retryInterval + ((retryJitter * Math.random()) | 0));\n      }\n      throw new Error(\n        `Rate limited for ${maxRetries + 1} consecutive attempts.`,\n      );\n    }\n    return Promise.resolve();\n  };\n\n  return {\n    sendRestPayload,\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}