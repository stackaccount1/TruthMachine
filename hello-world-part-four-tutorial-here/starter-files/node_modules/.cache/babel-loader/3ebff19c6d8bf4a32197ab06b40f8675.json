{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar SHOULD_RECONNECT_FALSE_MESSAGE = \"Provided shouldReconnect() returned false. Closing permanently.\";\nvar SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE = \"Provided shouldReconnect() resolved to false. Closing permanently.\";\n\nvar SturdyWebSocket =\n/** @class */\nfunction () {\n  function SturdyWebSocket(url, protocolsOrOptions, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.url = url;\n    this.onclose = null;\n    this.onerror = null;\n    this.onmessage = null;\n    this.onopen = null;\n    this.ondown = null;\n    this.onreopen = null;\n    this.CONNECTING = SturdyWebSocket.CONNECTING;\n    this.OPEN = SturdyWebSocket.OPEN;\n    this.CLOSING = SturdyWebSocket.CLOSING;\n    this.CLOSED = SturdyWebSocket.CLOSED;\n    this.hasBeenOpened = false;\n    this.isClosed = false;\n    this.messageBuffer = [];\n    this.nextRetryTime = 0;\n    this.reconnectCount = 0;\n    this.lastKnownExtensions = \"\";\n    this.lastKnownProtocol = \"\";\n    this.listeners = {};\n\n    if (protocolsOrOptions == null || typeof protocolsOrOptions === \"string\" || Array.isArray(protocolsOrOptions)) {\n      this.protocols = protocolsOrOptions;\n    } else {\n      options = protocolsOrOptions;\n    }\n\n    this.options = applyDefaultOptions(options);\n\n    if (!this.options.wsConstructor) {\n      if (typeof WebSocket !== \"undefined\") {\n        this.options.wsConstructor = WebSocket;\n      } else {\n        throw new Error(\"WebSocket not present in global scope and no \" + \"wsConstructor option was provided.\");\n      }\n    }\n\n    this.openNewWebSocket();\n  }\n\n  Object.defineProperty(SturdyWebSocket.prototype, \"binaryType\", {\n    get: function () {\n      return this.binaryTypeInternal || \"blob\";\n    },\n    set: function (binaryType) {\n      this.binaryTypeInternal = binaryType;\n\n      if (this.ws) {\n        this.ws.binaryType = binaryType;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SturdyWebSocket.prototype, \"bufferedAmount\", {\n    get: function () {\n      var sum = this.ws ? this.ws.bufferedAmount : 0;\n      var hasUnknownAmount = false;\n      this.messageBuffer.forEach(function (data) {\n        var byteLength = getDataByteLength(data);\n\n        if (byteLength != null) {\n          sum += byteLength;\n        } else {\n          hasUnknownAmount = true;\n        }\n      });\n\n      if (hasUnknownAmount) {\n        this.debugLog(\"Some buffered data had unknown length. bufferedAmount()\" + \" return value may be below the correct amount.\");\n      }\n\n      return sum;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SturdyWebSocket.prototype, \"extensions\", {\n    get: function () {\n      return this.ws ? this.ws.extensions : this.lastKnownExtensions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SturdyWebSocket.prototype, \"protocol\", {\n    get: function () {\n      return this.ws ? this.ws.protocol : this.lastKnownProtocol;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(SturdyWebSocket.prototype, \"readyState\", {\n    get: function () {\n      return this.isClosed ? SturdyWebSocket.CLOSED : SturdyWebSocket.OPEN;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SturdyWebSocket.prototype.close = function (code, reason) {\n    this.disposeSocket(code, reason);\n    this.shutdown();\n    this.debugLog(\"WebSocket permanently closed by client.\");\n  };\n\n  SturdyWebSocket.prototype.send = function (data) {\n    if (this.isClosed) {\n      throw new Error(\"WebSocket is already in CLOSING or CLOSED state.\");\n    } else if (this.ws && this.ws.readyState === this.OPEN) {\n      this.ws.send(data);\n    } else {\n      this.messageBuffer.push(data);\n    }\n  };\n\n  SturdyWebSocket.prototype.reconnect = function () {\n    if (this.isClosed) {\n      throw new Error(\"Cannot call reconnect() on socket which is permanently closed.\");\n    }\n\n    this.disposeSocket(1000, \"Client requested reconnect.\");\n    this.handleClose(undefined);\n  };\n\n  SturdyWebSocket.prototype.addEventListener = function (type, listener) {\n    if (!this.listeners[type]) {\n      this.listeners[type] = [];\n    }\n\n    this.listeners[type].push(listener);\n  };\n\n  SturdyWebSocket.prototype.dispatchEvent = function (event) {\n    return this.dispatchEventOfType(event.type, event);\n  };\n\n  SturdyWebSocket.prototype.removeEventListener = function (type, listener) {\n    if (this.listeners[type]) {\n      this.listeners[type] = this.listeners[type].filter(function (l) {\n        return l !== listener;\n      });\n    }\n  };\n\n  SturdyWebSocket.prototype.openNewWebSocket = function () {\n    var _this = this;\n\n    if (this.isClosed) {\n      return;\n    }\n\n    var _a = this.options,\n        connectTimeout = _a.connectTimeout,\n        wsConstructor = _a.wsConstructor;\n    this.debugLog(\"Opening new WebSocket to \" + this.url + \".\");\n    var ws = new wsConstructor(this.url, this.protocols);\n\n    ws.onclose = function (event) {\n      return _this.handleClose(event);\n    };\n\n    ws.onerror = function (event) {\n      return _this.handleError(event);\n    };\n\n    ws.onmessage = function (event) {\n      return _this.handleMessage(event);\n    };\n\n    ws.onopen = function (event) {\n      return _this.handleOpen(event);\n    };\n\n    this.connectTimeoutId = setTimeout(function () {\n      // If this is running, we still haven't opened the websocket.\n      // Kill it so we can try again.\n      _this.clearConnectTimeout();\n\n      _this.disposeSocket();\n\n      _this.handleClose(undefined);\n    }, connectTimeout);\n    this.ws = ws;\n  };\n\n  SturdyWebSocket.prototype.handleOpen = function (event) {\n    var _this = this;\n\n    if (!this.ws || this.isClosed) {\n      return;\n    }\n\n    var allClearResetTime = this.options.allClearResetTime;\n    this.debugLog(\"WebSocket opened.\");\n\n    if (this.binaryTypeInternal != null) {\n      this.ws.binaryType = this.binaryTypeInternal;\n    } else {\n      this.binaryTypeInternal = this.ws.binaryType;\n    }\n\n    this.clearConnectTimeout();\n\n    if (this.hasBeenOpened) {\n      this.dispatchEventOfType(\"reopen\", event);\n    } else {\n      this.dispatchEventOfType(\"open\", event);\n      this.hasBeenOpened = true;\n    }\n\n    this.messageBuffer.forEach(function (message) {\n      return _this.send(message);\n    });\n    this.messageBuffer = [];\n    this.allClearTimeoutId = setTimeout(function () {\n      _this.clearAllClearTimeout();\n\n      _this.nextRetryTime = 0;\n      _this.reconnectCount = 0;\n      var openTime = allClearResetTime / 1000 | 0;\n\n      _this.debugLog(\"WebSocket remained open for \" + openTime + \" seconds. Resetting\" + \" retry time and count.\");\n    }, allClearResetTime);\n  };\n\n  SturdyWebSocket.prototype.handleMessage = function (event) {\n    if (this.isClosed) {\n      return;\n    }\n\n    this.dispatchEventOfType(\"message\", event);\n  };\n\n  SturdyWebSocket.prototype.handleClose = function (event) {\n    var _this = this;\n\n    if (this.isClosed) {\n      return;\n    }\n\n    var _a = this.options,\n        maxReconnectAttempts = _a.maxReconnectAttempts,\n        shouldReconnect = _a.shouldReconnect;\n    this.clearConnectTimeout();\n    this.clearAllClearTimeout();\n\n    if (this.ws) {\n      this.lastKnownExtensions = this.ws.extensions;\n      this.lastKnownProtocol = this.ws.protocol;\n      this.disposeSocket();\n    }\n\n    this.dispatchEventOfType(\"down\", event);\n\n    if (this.reconnectCount >= maxReconnectAttempts) {\n      this.stopReconnecting(event, this.getTooManyFailedReconnectsMessage());\n      return;\n    }\n\n    var willReconnect = !event || shouldReconnect(event);\n\n    if (typeof willReconnect === \"boolean\") {\n      this.handleWillReconnect(willReconnect, event, SHOULD_RECONNECT_FALSE_MESSAGE);\n    } else {\n      willReconnect.then(function (willReconnectResolved) {\n        if (_this.isClosed) {\n          return;\n        }\n\n        _this.handleWillReconnect(willReconnectResolved, event, SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE);\n      });\n    }\n  };\n\n  SturdyWebSocket.prototype.handleError = function (event) {\n    this.dispatchEventOfType(\"error\", event);\n    this.debugLog(\"WebSocket encountered an error.\");\n  };\n\n  SturdyWebSocket.prototype.handleWillReconnect = function (willReconnect, event, denialReason) {\n    if (willReconnect) {\n      this.reestablishConnection();\n    } else {\n      this.stopReconnecting(event, denialReason);\n    }\n  };\n\n  SturdyWebSocket.prototype.reestablishConnection = function () {\n    var _this = this;\n\n    var _a = this.options,\n        minReconnectDelay = _a.minReconnectDelay,\n        maxReconnectDelay = _a.maxReconnectDelay,\n        reconnectBackoffFactor = _a.reconnectBackoffFactor;\n    this.reconnectCount++;\n    var retryTime = this.nextRetryTime;\n    this.nextRetryTime = Math.max(minReconnectDelay, Math.min(this.nextRetryTime * reconnectBackoffFactor, maxReconnectDelay));\n    setTimeout(function () {\n      return _this.openNewWebSocket();\n    }, retryTime);\n    var retryTimeSeconds = retryTime / 1000 | 0;\n    this.debugLog(\"WebSocket was closed. Re-opening in \" + retryTimeSeconds + \" seconds.\");\n  };\n\n  SturdyWebSocket.prototype.stopReconnecting = function (event, debugReason) {\n    this.debugLog(debugReason);\n    this.shutdown();\n\n    if (event) {\n      this.dispatchEventOfType(\"close\", event);\n    }\n  };\n\n  SturdyWebSocket.prototype.shutdown = function () {\n    this.isClosed = true;\n    this.clearAllTimeouts();\n    this.messageBuffer = [];\n    this.disposeSocket();\n  };\n\n  SturdyWebSocket.prototype.disposeSocket = function (closeCode, reason) {\n    if (!this.ws) {\n      return;\n    } // Use noop handlers instead of null because some WebSocket\n    // implementations, such as the one from isomorphic-ws, raise a stink on\n    // unhandled events.\n\n\n    this.ws.onerror = noop;\n    this.ws.onclose = noop;\n    this.ws.onmessage = noop;\n    this.ws.onopen = noop;\n    this.ws.close(closeCode, reason);\n    this.ws = undefined;\n  };\n\n  SturdyWebSocket.prototype.clearAllTimeouts = function () {\n    this.clearConnectTimeout();\n    this.clearAllClearTimeout();\n  };\n\n  SturdyWebSocket.prototype.clearConnectTimeout = function () {\n    if (this.connectTimeoutId != null) {\n      clearTimeout(this.connectTimeoutId);\n      this.connectTimeoutId = undefined;\n    }\n  };\n\n  SturdyWebSocket.prototype.clearAllClearTimeout = function () {\n    if (this.allClearTimeoutId != null) {\n      clearTimeout(this.allClearTimeoutId);\n      this.allClearTimeoutId = undefined;\n    }\n  };\n\n  SturdyWebSocket.prototype.dispatchEventOfType = function (type, event) {\n    var _this = this;\n\n    switch (type) {\n      case \"close\":\n        if (this.onclose) {\n          this.onclose(event);\n        }\n\n        break;\n\n      case \"error\":\n        if (this.onerror) {\n          this.onerror(event);\n        }\n\n        break;\n\n      case \"message\":\n        if (this.onmessage) {\n          this.onmessage(event);\n        }\n\n        break;\n\n      case \"open\":\n        if (this.onopen) {\n          this.onopen(event);\n        }\n\n        break;\n\n      case \"down\":\n        if (this.ondown) {\n          this.ondown(event);\n        }\n\n        break;\n\n      case \"reopen\":\n        if (this.onreopen) {\n          this.onreopen(event);\n        }\n\n        break;\n    }\n\n    if (type in this.listeners) {\n      this.listeners[type].slice().forEach(function (listener) {\n        return _this.callListener(listener, event);\n      });\n    }\n\n    return !event || !event.defaultPrevented;\n  };\n\n  SturdyWebSocket.prototype.callListener = function (listener, event) {\n    if (typeof listener === \"function\") {\n      listener.call(this, event);\n    } else {\n      listener.handleEvent.call(this, event);\n    }\n  };\n\n  SturdyWebSocket.prototype.debugLog = function (message) {\n    if (this.options.debug) {\n      // tslint:disable-next-line:no-console\n      console.log(message);\n    }\n  };\n\n  SturdyWebSocket.prototype.getTooManyFailedReconnectsMessage = function () {\n    var maxReconnectAttempts = this.options.maxReconnectAttempts;\n    return \"Failed to reconnect after \" + maxReconnectAttempts + \" \" + pluralize(\"attempt\", maxReconnectAttempts) + \". Closing permanently.\";\n  };\n\n  SturdyWebSocket.DEFAULT_OPTIONS = {\n    allClearResetTime: 5000,\n    connectTimeout: 5000,\n    debug: false,\n    minReconnectDelay: 1000,\n    maxReconnectDelay: 30000,\n    maxReconnectAttempts: Number.POSITIVE_INFINITY,\n    reconnectBackoffFactor: 1.5,\n    shouldReconnect: function () {\n      return true;\n    },\n    wsConstructor: undefined\n  };\n  SturdyWebSocket.CONNECTING = 0;\n  SturdyWebSocket.OPEN = 1;\n  SturdyWebSocket.CLOSING = 2;\n  SturdyWebSocket.CLOSED = 3;\n  return SturdyWebSocket;\n}();\n\nexports.default = SturdyWebSocket;\n\nfunction applyDefaultOptions(options) {\n  var result = {};\n  Object.keys(SturdyWebSocket.DEFAULT_OPTIONS).forEach(function (key) {\n    var value = options[key];\n    result[key] = value === undefined ? SturdyWebSocket.DEFAULT_OPTIONS[key] : value;\n  });\n  return result;\n}\n\nfunction getDataByteLength(data) {\n  if (typeof data === \"string\") {\n    // UTF-16 strings use two bytes per character.\n    return 2 * data.length;\n  } else if (data instanceof ArrayBuffer) {\n    return data.byteLength;\n  } else if (data instanceof Blob) {\n    return data.size;\n  } else {\n    return undefined;\n  }\n}\n\nfunction pluralize(s, n) {\n  return n === 1 ? s : s + \"s\";\n}\n\nfunction noop() {// Nothing.\n}","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["export interface Options {\n    allClearResetTime?: number;\n    connectTimeout?: number;\n    debug?: boolean;\n    minReconnectDelay?: number;\n    maxReconnectDelay?: number;\n    maxReconnectAttempts?: number;\n    reconnectBackoffFactor?: number;\n    wsConstructor?: new (url: string, protocols?: string | string[]) => any;\n    shouldReconnect?(closeEvent: CloseEvent): boolean | Promise<boolean>;\n}\n\ninterface SturdyWebSocketEventMap extends WebSocketEventMap {\n    down: CloseEvent;\n    reopen: Event;\n}\n\ntype WebSocketListener<K extends keyof SturdyWebSocketEventMap> = (\n    this: WebSocket,\n    event: SturdyWebSocketEventMap[K],\n) => any;\n\ntype WebSocketListeners = {\n    [K in keyof SturdyWebSocketEventMap]?: Array<WebSocketListener<K>>;\n} & {\n    [key: string]: EventListenerOrEventListenerObject[];\n};\n\nconst SHOULD_RECONNECT_FALSE_MESSAGE =\n    \"Provided shouldReconnect() returned false. Closing permanently.\";\nconst SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE =\n    \"Provided shouldReconnect() resolved to false. Closing permanently.\";\n\nexport default class SturdyWebSocket implements WebSocket {\n    public static readonly DEFAULT_OPTIONS: Required<Options> = {\n        allClearResetTime: 5000,\n        connectTimeout: 5000,\n        debug: false,\n        minReconnectDelay: 1000,\n        maxReconnectDelay: 30000,\n        maxReconnectAttempts: Number.POSITIVE_INFINITY,\n        reconnectBackoffFactor: 1.5,\n        shouldReconnect: () => true,\n        wsConstructor: undefined!,\n    };\n\n    public static readonly CONNECTING = 0;\n    public static readonly OPEN = 1;\n    public static readonly CLOSING = 2;\n    public static readonly CLOSED = 3;\n\n    public onclose: ((event: CloseEvent) => void) | null = null;\n    public onerror: ((event: Event) => void) | null = null;\n    public onmessage: ((event: MessageEvent) => void) | null = null;\n    public onopen: ((event: Event) => void) | null = null;\n    public ondown: ((event: CloseEvent | undefined) => void) | null = null;\n    public onreopen: ((event: Event) => void) | null = null;\n    public readonly CONNECTING = SturdyWebSocket.CONNECTING;\n    public readonly OPEN = SturdyWebSocket.OPEN;\n    public readonly CLOSING = SturdyWebSocket.CLOSING;\n    public readonly CLOSED = SturdyWebSocket.CLOSED;\n\n    private readonly protocols?: string | string[];\n    private readonly options: Required<Options>;\n    private ws?: WebSocket;\n    private hasBeenOpened = false;\n    private isClosed = false;\n    private messageBuffer: any[] = [];\n    private nextRetryTime: number = 0;\n    private reconnectCount = 0;\n    private allClearTimeoutId?: any;\n    private connectTimeoutId?: any;\n    private binaryTypeInternal?: BinaryType;\n    private lastKnownExtensions = \"\";\n    private lastKnownProtocol = \"\";\n    private readonly listeners: WebSocketListeners = {};\n\n    constructor(url: string, options?: Options);\n    constructor(\n        url: string,\n        protocols: string | string[] | undefined,\n        options?: Options,\n    );\n    constructor(\n        public readonly url: string,\n        protocolsOrOptions?: string | string[] | Options,\n        options: Options = {},\n    ) {\n        if (\n            protocolsOrOptions == null ||\n            typeof protocolsOrOptions === \"string\" ||\n            Array.isArray(protocolsOrOptions)\n        ) {\n            this.protocols = protocolsOrOptions;\n        } else {\n            options = protocolsOrOptions;\n        }\n        this.options = applyDefaultOptions(options);\n        if (!this.options.wsConstructor) {\n            if (typeof WebSocket !== \"undefined\") {\n                this.options.wsConstructor = WebSocket;\n            } else {\n                throw new Error(\n                    \"WebSocket not present in global scope and no \" +\n                        \"wsConstructor option was provided.\",\n                );\n            }\n        }\n        this.openNewWebSocket();\n    }\n\n    public get binaryType(): BinaryType {\n        return this.binaryTypeInternal || \"blob\";\n    }\n\n    public set binaryType(binaryType: BinaryType) {\n        this.binaryTypeInternal = binaryType;\n        if (this.ws) {\n            this.ws.binaryType = binaryType;\n        }\n    }\n\n    public get bufferedAmount(): number {\n        let sum = this.ws ? this.ws.bufferedAmount : 0;\n        let hasUnknownAmount = false;\n        this.messageBuffer.forEach(data => {\n            const byteLength = getDataByteLength(data);\n            if (byteLength != null) {\n                sum += byteLength;\n            } else {\n                hasUnknownAmount = true;\n            }\n        });\n        if (hasUnknownAmount) {\n            this.debugLog(\n                \"Some buffered data had unknown length. bufferedAmount()\" +\n                    \" return value may be below the correct amount.\",\n            );\n        }\n        return sum;\n    }\n\n    public get extensions(): string {\n        return this.ws ? this.ws.extensions : this.lastKnownExtensions;\n    }\n\n    public get protocol(): string {\n        return this.ws ? this.ws.protocol : this.lastKnownProtocol;\n    }\n\n    public get readyState(): number {\n        return this.isClosed ? SturdyWebSocket.CLOSED : SturdyWebSocket.OPEN;\n    }\n\n    public close(code?: number, reason?: string): void {\n        this.disposeSocket(code, reason);\n        this.shutdown();\n        this.debugLog(\"WebSocket permanently closed by client.\");\n    }\n\n    public send(data: any): void {\n        if (this.isClosed) {\n            throw new Error(\"WebSocket is already in CLOSING or CLOSED state.\");\n        } else if (this.ws && this.ws.readyState === this.OPEN) {\n            this.ws.send(data);\n        } else {\n            this.messageBuffer.push(data);\n        }\n    }\n\n    public reconnect(): void {\n        if (this.isClosed) {\n            throw new Error(\n                \"Cannot call reconnect() on socket which is permanently closed.\",\n            );\n        }\n        this.disposeSocket(1000, \"Client requested reconnect.\");\n        this.handleClose(undefined);\n    }\n\n    public addEventListener<K extends keyof SturdyWebSocketEventMap>(\n        type: K,\n        listener: (this: WebSocket, event: SturdyWebSocketEventMap[K]) => void,\n    ): void;\n    public addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void;\n    public addEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void {\n        if (!this.listeners[type]) {\n            this.listeners[type] = [];\n        }\n        this.listeners[type].push(listener);\n    }\n\n    public dispatchEvent(event: Event): boolean {\n        return this.dispatchEventOfType(event.type, event);\n    }\n\n    public removeEventListener<K extends keyof SturdyWebSocketEventMap>(\n        type: K,\n        listener: (this: WebSocket, event: SturdyWebSocketEventMap[K]) => void,\n    ): void;\n    public removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void;\n    public removeEventListener(\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n    ): void {\n        if (this.listeners[type]) {\n            this.listeners[type] = this.listeners[type].filter(\n                l => l !== listener,\n            );\n        }\n    }\n\n    private openNewWebSocket(): void {\n        if (this.isClosed) {\n            return;\n        }\n        const { connectTimeout, wsConstructor } = this.options;\n        this.debugLog(`Opening new WebSocket to ${this.url}.`);\n        const ws: WebSocket = new wsConstructor(this.url, this.protocols);\n        ws.onclose = event => this.handleClose(event);\n        ws.onerror = event => this.handleError(event);\n        ws.onmessage = event => this.handleMessage(event);\n        ws.onopen = event => this.handleOpen(event);\n        this.connectTimeoutId = setTimeout(() => {\n            // If this is running, we still haven't opened the websocket.\n            // Kill it so we can try again.\n            this.clearConnectTimeout();\n            this.disposeSocket();\n            this.handleClose(undefined);\n        }, connectTimeout);\n        this.ws = ws;\n    }\n\n    private handleOpen(event: Event): void {\n        if (!this.ws || this.isClosed) {\n            return;\n        }\n        const { allClearResetTime } = this.options;\n        this.debugLog(\"WebSocket opened.\");\n        if (this.binaryTypeInternal != null) {\n            this.ws.binaryType = this.binaryTypeInternal;\n        } else {\n            this.binaryTypeInternal = this.ws.binaryType;\n        }\n        this.clearConnectTimeout();\n        if (this.hasBeenOpened) {\n            this.dispatchEventOfType(\"reopen\", event);\n        } else {\n            this.dispatchEventOfType(\"open\", event);\n            this.hasBeenOpened = true;\n        }\n        this.messageBuffer.forEach(message => this.send(message));\n        this.messageBuffer = [];\n        this.allClearTimeoutId = setTimeout(() => {\n            this.clearAllClearTimeout();\n            this.nextRetryTime = 0;\n            this.reconnectCount = 0;\n            const openTime = (allClearResetTime / 1000) | 0;\n            this.debugLog(\n                `WebSocket remained open for ${openTime} seconds. Resetting` +\n                    \" retry time and count.\",\n            );\n        }, allClearResetTime);\n    }\n\n    private handleMessage(event: MessageEvent): void {\n        if (this.isClosed) {\n            return;\n        }\n        this.dispatchEventOfType(\"message\", event);\n    }\n\n    private handleClose(event: CloseEvent | undefined): void {\n        if (this.isClosed) {\n            return;\n        }\n        const { maxReconnectAttempts, shouldReconnect } = this.options;\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n        if (this.ws) {\n            this.lastKnownExtensions = this.ws.extensions;\n            this.lastKnownProtocol = this.ws.protocol;\n            this.disposeSocket();\n        }\n        this.dispatchEventOfType(\"down\", event);\n        if (this.reconnectCount >= maxReconnectAttempts) {\n            this.stopReconnecting(\n                event,\n                this.getTooManyFailedReconnectsMessage(),\n            );\n            return;\n        }\n        const willReconnect = !event || shouldReconnect(event);\n        if (typeof willReconnect === \"boolean\") {\n            this.handleWillReconnect(\n                willReconnect,\n                event,\n                SHOULD_RECONNECT_FALSE_MESSAGE,\n            );\n        } else {\n            willReconnect.then(willReconnectResolved => {\n                if (this.isClosed) {\n                    return;\n                }\n                this.handleWillReconnect(\n                    willReconnectResolved,\n                    event,\n                    SHOULD_RECONNECT_PROMISE_FALSE_MESSAGE,\n                );\n            });\n        }\n    }\n\n    private handleError(event: Event): void {\n        this.dispatchEventOfType(\"error\", event);\n        this.debugLog(\"WebSocket encountered an error.\");\n    }\n\n    private handleWillReconnect(\n        willReconnect: boolean,\n        event: CloseEvent | undefined,\n        denialReason: string,\n    ): void {\n        if (willReconnect) {\n            this.reestablishConnection();\n        } else {\n            this.stopReconnecting(event, denialReason);\n        }\n    }\n\n    private reestablishConnection(): void {\n        const {\n            minReconnectDelay,\n            maxReconnectDelay,\n            reconnectBackoffFactor,\n        } = this.options;\n        this.reconnectCount++;\n        const retryTime = this.nextRetryTime;\n        this.nextRetryTime = Math.max(\n            minReconnectDelay,\n            Math.min(\n                this.nextRetryTime * reconnectBackoffFactor,\n                maxReconnectDelay,\n            ),\n        );\n        setTimeout(() => this.openNewWebSocket(), retryTime);\n        const retryTimeSeconds = (retryTime / 1000) | 0;\n        this.debugLog(\n            `WebSocket was closed. Re-opening in ${retryTimeSeconds} seconds.`,\n        );\n    }\n\n    private stopReconnecting(\n        event: CloseEvent | undefined,\n        debugReason: string,\n    ): void {\n        this.debugLog(debugReason);\n        this.shutdown();\n        if (event) {\n            this.dispatchEventOfType(\"close\", event);\n        }\n    }\n\n    private shutdown(): void {\n        this.isClosed = true;\n        this.clearAllTimeouts();\n        this.messageBuffer = [];\n        this.disposeSocket();\n    }\n\n    private disposeSocket(closeCode?: number, reason?: string): void {\n        if (!this.ws) {\n            return;\n        }\n        // Use noop handlers instead of null because some WebSocket\n        // implementations, such as the one from isomorphic-ws, raise a stink on\n        // unhandled events.\n        this.ws.onerror = noop;\n        this.ws.onclose = noop;\n        this.ws.onmessage = noop;\n        this.ws.onopen = noop;\n        this.ws.close(closeCode, reason);\n        this.ws = undefined;\n    }\n\n    private clearAllTimeouts(): void {\n        this.clearConnectTimeout();\n        this.clearAllClearTimeout();\n    }\n\n    private clearConnectTimeout(): void {\n        if (this.connectTimeoutId != null) {\n            clearTimeout(this.connectTimeoutId);\n            this.connectTimeoutId = undefined;\n        }\n    }\n\n    private clearAllClearTimeout(): void {\n        if (this.allClearTimeoutId != null) {\n            clearTimeout(this.allClearTimeoutId);\n            this.allClearTimeoutId = undefined;\n        }\n    }\n\n    private dispatchEventOfType(type: string, event: any): boolean {\n        switch (type) {\n            case \"close\":\n                if (this.onclose) {\n                    this.onclose(event);\n                }\n                break;\n            case \"error\":\n                if (this.onerror) {\n                    this.onerror(event);\n                }\n                break;\n            case \"message\":\n                if (this.onmessage) {\n                    this.onmessage(event);\n                }\n                break;\n            case \"open\":\n                if (this.onopen) {\n                    this.onopen(event);\n                }\n                break;\n            case \"down\":\n                if (this.ondown) {\n                    this.ondown(event);\n                }\n                break;\n            case \"reopen\":\n                if (this.onreopen) {\n                    this.onreopen(event);\n                }\n                break;\n        }\n        if (type in this.listeners) {\n            this.listeners[type]\n                .slice()\n                .forEach(listener => this.callListener(listener, event));\n        }\n        return !event || !(event as Event).defaultPrevented;\n    }\n\n    private callListener(\n        listener: EventListenerOrEventListenerObject,\n        event: Event,\n    ): void {\n        if (typeof listener === \"function\") {\n            listener.call(this, event);\n        } else {\n            listener.handleEvent.call(this, event);\n        }\n    }\n\n    private debugLog(message: string): void {\n        if (this.options.debug) {\n            // tslint:disable-next-line:no-console\n            console.log(message);\n        }\n    }\n\n    private getTooManyFailedReconnectsMessage(): string {\n        const { maxReconnectAttempts } = this.options;\n        return `Failed to reconnect after ${maxReconnectAttempts} ${pluralize(\n            \"attempt\",\n            maxReconnectAttempts,\n        )}. Closing permanently.`;\n    }\n}\n\nfunction applyDefaultOptions(options: Options): Required<Options> {\n    const result: any = {};\n    Object.keys(SturdyWebSocket.DEFAULT_OPTIONS).forEach(key => {\n        const value = (options as any)[key];\n        result[key] =\n            value === undefined\n                ? (SturdyWebSocket.DEFAULT_OPTIONS as any)[key]\n                : value;\n    });\n    return result;\n}\n\nfunction getDataByteLength(data: any): number | undefined {\n    if (typeof data === \"string\") {\n        // UTF-16 strings use two bytes per character.\n        return 2 * data.length;\n    } else if (data instanceof ArrayBuffer) {\n        return data.byteLength;\n    } else if (data instanceof Blob) {\n        return data.size;\n    } else {\n        return undefined;\n    }\n}\n\nfunction pluralize(s: string, n: number): string {\n    return n === 1 ? s : `${s}s`;\n}\n\nfunction noop(): void {\n    // Nothing.\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}