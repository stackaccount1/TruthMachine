{"ast":null,"code":"/*!\n * URI.js - Mutating URLs\n * IPv6 Support\n *\n * Version: 1.19.11\n *\n * Author: Rodney Rehm\n * Web: http://medialize.github.io/URI.js/\n *\n * Licensed under\n *   MIT License http://www.opensource.org/licenses/mit-license\n *\n */\n(function (root, factory) {\n  'use strict'; // https://github.com/umdjs/umd/blob/master/returnExports.js\n\n  if (typeof module === 'object' && module.exports) {\n    // Node\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(factory);\n  } else {\n    // Browser globals (root is window)\n    root.IPv6 = factory(root);\n  }\n})(this, function (root) {\n  'use strict';\n  /*\n  var _in = \"fe80:0000:0000:0000:0204:61ff:fe9d:f156\";\n  var _out = IPv6.best(_in);\n  var _expected = \"fe80::204:61ff:fe9d:f156\";\n   console.log(_in, _out, _expected, _out === _expected);\n  */\n  // save current IPv6 variable, if any\n\n  var _IPv6 = root && root.IPv6;\n\n  function bestPresentation(address) {\n    // based on:\n    // Javascript to test an IPv6 address for proper format, and to\n    // present the \"best text representation\" according to IETF Draft RFC at\n    // http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04\n    // 8 Feb 2010 Rich Brown, Dartware, LLC\n    // Please feel free to use this code as long as you provide a link to\n    // http://www.intermapper.com\n    // http://intermapper.com/support/tools/IPV6-Validator.aspx\n    // http://download.dartware.com/thirdparty/ipv6validator.js\n    var _address = address.toLowerCase();\n\n    var segments = _address.split(':');\n\n    var length = segments.length;\n    var total = 8; // trim colons (:: or ::a:b:c… or …a:b:c::)\n\n    if (segments[0] === '' && segments[1] === '' && segments[2] === '') {\n      // must have been ::\n      // remove first two items\n      segments.shift();\n      segments.shift();\n    } else if (segments[0] === '' && segments[1] === '') {\n      // must have been ::xxxx\n      // remove the first item\n      segments.shift();\n    } else if (segments[length - 1] === '' && segments[length - 2] === '') {\n      // must have been xxxx::\n      segments.pop();\n    }\n\n    length = segments.length; // adjust total segments for IPv4 trailer\n\n    if (segments[length - 1].indexOf('.') !== -1) {\n      // found a \".\" which means IPv4\n      total = 7;\n    } // fill empty segments them with \"0000\"\n\n\n    var pos;\n\n    for (pos = 0; pos < length; pos++) {\n      if (segments[pos] === '') {\n        break;\n      }\n    }\n\n    if (pos < total) {\n      segments.splice(pos, 1, '0000');\n\n      while (segments.length < total) {\n        segments.splice(pos, 0, '0000');\n      }\n    } // strip leading zeros\n\n\n    var _segments;\n\n    for (var i = 0; i < total; i++) {\n      _segments = segments[i].split('');\n\n      for (var j = 0; j < 3; j++) {\n        if (_segments[0] === '0' && _segments.length > 1) {\n          _segments.splice(0, 1);\n        } else {\n          break;\n        }\n      }\n\n      segments[i] = _segments.join('');\n    } // find longest sequence of zeroes and coalesce them into one segment\n\n\n    var best = -1;\n    var _best = 0;\n    var _current = 0;\n    var current = -1;\n    var inzeroes = false; // i; already declared\n\n    for (i = 0; i < total; i++) {\n      if (inzeroes) {\n        if (segments[i] === '0') {\n          _current += 1;\n        } else {\n          inzeroes = false;\n\n          if (_current > _best) {\n            best = current;\n            _best = _current;\n          }\n        }\n      } else {\n        if (segments[i] === '0') {\n          inzeroes = true;\n          current = i;\n          _current = 1;\n        }\n      }\n    }\n\n    if (_current > _best) {\n      best = current;\n      _best = _current;\n    }\n\n    if (_best > 1) {\n      segments.splice(best, _best, '');\n    }\n\n    length = segments.length; // assemble remaining segments\n\n    var result = '';\n\n    if (segments[0] === '') {\n      result = ':';\n    }\n\n    for (i = 0; i < length; i++) {\n      result += segments[i];\n\n      if (i === length - 1) {\n        break;\n      }\n\n      result += ':';\n    }\n\n    if (segments[length - 1] === '') {\n      result += ':';\n    }\n\n    return result;\n  }\n\n  function noConflict() {\n    /*jshint validthis: true */\n    if (root.IPv6 === this) {\n      root.IPv6 = _IPv6;\n    }\n\n    return this;\n  }\n\n  return {\n    best: bestPresentation,\n    noConflict: noConflict\n  };\n});","map":{"version":3,"names":["root","factory","module","exports","define","amd","IPv6","_IPv6","bestPresentation","address","_address","toLowerCase","segments","split","length","total","shift","pop","indexOf","pos","splice","_segments","i","j","join","best","_best","_current","current","inzeroes","result","noConflict"],"sources":["/home/user/Desktop/TruthMachine/hello-world-part-four-tutorial-here/starter-files/node_modules/urijs/src/IPv6.js"],"sourcesContent":["/*!\n * URI.js - Mutating URLs\n * IPv6 Support\n *\n * Version: 1.19.11\n *\n * Author: Rodney Rehm\n * Web: http://medialize.github.io/URI.js/\n *\n * Licensed under\n *   MIT License http://www.opensource.org/licenses/mit-license\n *\n */\n\n(function (root, factory) {\n  'use strict';\n  // https://github.com/umdjs/umd/blob/master/returnExports.js\n  if (typeof module === 'object' && module.exports) {\n    // Node\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(factory);\n  } else {\n    // Browser globals (root is window)\n    root.IPv6 = factory(root);\n  }\n}(this, function (root) {\n  'use strict';\n\n  /*\n  var _in = \"fe80:0000:0000:0000:0204:61ff:fe9d:f156\";\n  var _out = IPv6.best(_in);\n  var _expected = \"fe80::204:61ff:fe9d:f156\";\n\n  console.log(_in, _out, _expected, _out === _expected);\n  */\n\n  // save current IPv6 variable, if any\n  var _IPv6 = root && root.IPv6;\n\n  function bestPresentation(address) {\n    // based on:\n    // Javascript to test an IPv6 address for proper format, and to\n    // present the \"best text representation\" according to IETF Draft RFC at\n    // http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04\n    // 8 Feb 2010 Rich Brown, Dartware, LLC\n    // Please feel free to use this code as long as you provide a link to\n    // http://www.intermapper.com\n    // http://intermapper.com/support/tools/IPV6-Validator.aspx\n    // http://download.dartware.com/thirdparty/ipv6validator.js\n\n    var _address = address.toLowerCase();\n    var segments = _address.split(':');\n    var length = segments.length;\n    var total = 8;\n\n    // trim colons (:: or ::a:b:c… or …a:b:c::)\n    if (segments[0] === '' && segments[1] === '' && segments[2] === '') {\n      // must have been ::\n      // remove first two items\n      segments.shift();\n      segments.shift();\n    } else if (segments[0] === '' && segments[1] === '') {\n      // must have been ::xxxx\n      // remove the first item\n      segments.shift();\n    } else if (segments[length - 1] === '' && segments[length - 2] === '') {\n      // must have been xxxx::\n      segments.pop();\n    }\n\n    length = segments.length;\n\n    // adjust total segments for IPv4 trailer\n    if (segments[length - 1].indexOf('.') !== -1) {\n      // found a \".\" which means IPv4\n      total = 7;\n    }\n\n    // fill empty segments them with \"0000\"\n    var pos;\n    for (pos = 0; pos < length; pos++) {\n      if (segments[pos] === '') {\n        break;\n      }\n    }\n\n    if (pos < total) {\n      segments.splice(pos, 1, '0000');\n      while (segments.length < total) {\n        segments.splice(pos, 0, '0000');\n      }\n    }\n\n    // strip leading zeros\n    var _segments;\n    for (var i = 0; i < total; i++) {\n      _segments = segments[i].split('');\n      for (var j = 0; j < 3 ; j++) {\n        if (_segments[0] === '0' && _segments.length > 1) {\n          _segments.splice(0,1);\n        } else {\n          break;\n        }\n      }\n\n      segments[i] = _segments.join('');\n    }\n\n    // find longest sequence of zeroes and coalesce them into one segment\n    var best = -1;\n    var _best = 0;\n    var _current = 0;\n    var current = -1;\n    var inzeroes = false;\n    // i; already declared\n\n    for (i = 0; i < total; i++) {\n      if (inzeroes) {\n        if (segments[i] === '0') {\n          _current += 1;\n        } else {\n          inzeroes = false;\n          if (_current > _best) {\n            best = current;\n            _best = _current;\n          }\n        }\n      } else {\n        if (segments[i] === '0') {\n          inzeroes = true;\n          current = i;\n          _current = 1;\n        }\n      }\n    }\n\n    if (_current > _best) {\n      best = current;\n      _best = _current;\n    }\n\n    if (_best > 1) {\n      segments.splice(best, _best, '');\n    }\n\n    length = segments.length;\n\n    // assemble remaining segments\n    var result = '';\n    if (segments[0] === '')  {\n      result = ':';\n    }\n\n    for (i = 0; i < length; i++) {\n      result += segments[i];\n      if (i === length - 1) {\n        break;\n      }\n\n      result += ':';\n    }\n\n    if (segments[length - 1] === '') {\n      result += ':';\n    }\n\n    return result;\n  }\n\n  function noConflict() {\n    /*jshint validthis: true */\n    if (root.IPv6 === this) {\n      root.IPv6 = _IPv6;\n    }\n\n    return this;\n  }\n\n  return {\n    best: bestPresentation,\n    noConflict: noConflict\n  };\n}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}