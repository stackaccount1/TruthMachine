{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport fetchPonyfill from \"fetch-ponyfill\";\nimport { VERSION } from \"../version\";\n\nvar _a = fetchPonyfill(),\n    fetch = _a.fetch,\n    Headers = _a.Headers;\n\nvar ALCHEMY_HEADERS = new Headers({\n  Accept: \"application/json\",\n  \"Content-Type\": \"application/json\",\n  \"Alchemy-Web3-Version\": VERSION\n});\nvar RATE_LIMIT_STATUS = 429;\nexport function makeJsonRpcHttpSender(url) {\n  var _this = this;\n\n  return function (request) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var response, status, _a;\n\n      var _b, _c;\n\n      var _d;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , fetch(url, {\n              method: \"POST\",\n              headers: ALCHEMY_HEADERS,\n              body: JSON.stringify(request)\n            })];\n\n          case 1:\n            response = _e.sent();\n            status = response.status;\n            _a = status;\n\n            switch (_a) {\n              case 200:\n                return [3\n                /*break*/\n                , 2];\n\n              case RATE_LIMIT_STATUS:\n                return [3\n                /*break*/\n                , 4];\n\n              case 0:\n                return [3\n                /*break*/\n                , 5];\n            }\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 2:\n            _b = {\n              type: \"jsonrpc\"\n            };\n            return [4\n            /*yield*/\n            , response.json()];\n\n          case 3:\n            return [2\n            /*return*/\n            , (_b.response = _e.sent(), _b)];\n\n          case 4:\n            return [2\n            /*return*/\n            , {\n              type: \"rateLimit\"\n            }];\n\n          case 5:\n            return [2\n            /*return*/\n            , {\n              type: \"networkError\",\n              status: 0,\n              message: \"Connection failed.\"\n            }];\n\n          case 6:\n            _c = {\n              status: status,\n              type: \"networkError\"\n            };\n            return [4\n            /*yield*/\n            , response.json()];\n\n          case 7:\n            return [2\n            /*return*/\n            , (_c.message = (_d = _e.sent().error) === null || _d === void 0 ? void 0 : _d.message, _c)];\n        }\n      });\n    });\n  };\n}","map":{"version":3,"sources":["../../../src/web3-adapter/alchemySendHttp.ts"],"names":[],"mappings":";AAAA,OAAO,aAAP,MAA0B,gBAA1B;AACA,SAAS,OAAT,QAAwB,YAAxB;;AAGM,IAAA,EAAA,GAAqB,aAAa,EAAlC;AAAA,IAAE,KAAK,GAAA,EAAA,CAAA,KAAP;AAAA,IAAS,OAAO,GAAA,EAAA,CAAA,OAAhB;;AAEN,IAAM,eAAe,GAAG,IAAI,OAAJ,CAAY;EAClC,MAAM,EAAE,kBAD0B;EAElC,gBAAgB,kBAFkB;EAGlC,wBAAwB;AAHU,CAAZ,CAAxB;AAKA,IAAM,iBAAiB,GAAG,GAA1B;AAEA,OAAM,SAAU,qBAAV,CAAgC,GAAhC,EAA2C;EAAjD,IAAA,KAAA,GAAA,IAAA;;EACE,OAAO,UAAO,OAAP,EAAc;IAAA,OAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;;;;;YACF,OAAA,CAAA;YAAA;YAAA,EAAM,KAAK,CAAC,GAAD,EAAM;cAChC,MAAM,EAAE,MADwB;cAEhC,OAAO,EAAE,eAFuB;cAGhC,IAAI,EAAE,IAAI,CAAC,SAAL,CAAe,OAAf;YAH0B,CAAN,CAAX,CAAA;;;YAAX,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX;YAKE,MAAM,GAAK,QAAQ,CAAb,MAAN;YACA,EAAA,GAAA,MAAA;;;mBACD,G;gBAAA,OAAA,CAAA;gBAAA;gBAAA,EAAA,CAAA,CAAA;;mBAEA,iB;gBAAA,OAAA,CAAA;gBAAA;gBAAA,EAAA,CAAA,CAAA;;mBAEA,C;gBAAA,OAAA,CAAA;gBAAA;gBAAA,EAAA,CAAA,CAAA;;;;;;;;;cAHM,IAAI,EAAE;;YAAqB,OAAA,CAAA;YAAA;YAAA,EAAM,QAAQ,CAAC,IAAT,EAAN,CAAA;;;YAApC,OAAA,CAAA;YAAA;YAAA,GAA0B,EAAA,CAAA,QAAA,GAAU,EAAA,CAAA,IAAA,EAAV,EAA+B,EAAzD,EAAA;;;YAEA,OAAA,CAAA;YAAA;YAAA,EAAO;cAAE,IAAI,EAAE;YAAR,CAAP,CAAA;;;YAEA,OAAA,CAAA;YAAA;YAAA,EAAO;cACL,IAAI,EAAE,cADD;cAEL,MAAM,EAAE,CAFH;cAGL,OAAO,EAAE;YAHJ,CAAP,CAAA;;;;cAOE,MAAM,EAAA,M;cACN,IAAI,EAAE;;YACI,OAAA,CAAA;YAAA;YAAA,EAAM,QAAQ,CAAC,IAAT,EAAN,CAAA;;;YAHZ,OAAA,CAAA;YAAA;YAAA,GAGE,EAAA,CAAA,OAAA,GAAS,CAAA,EAAA,GAAC,EAAA,CAAA,IAAA,EAAD,CAAwB,KAAxB,MAA6B,IAA7B,IAA6B,EAAA,KAAA,KAAA,CAA7B,GAA6B,KAAA,CAA7B,GAA6B,EAAA,CAAE,OAAxC,EACA,EAJF,EAAA;;;KAnBe,CAAA;EAyBpB,CAzBD;AA0BD","sourcesContent":["import fetchPonyfill from \"fetch-ponyfill\";\nimport { VERSION } from \"../version\";\nimport { AlchemySendJsonRpcFunction } from \"./alchemySend\";\n\nconst { fetch, Headers } = fetchPonyfill();\n\nconst ALCHEMY_HEADERS = new Headers({\n  Accept: \"application/json\",\n  \"Content-Type\": \"application/json\",\n  \"Alchemy-Web3-Version\": VERSION,\n});\nconst RATE_LIMIT_STATUS = 429;\n\nexport function makeJsonRpcHttpSender(url: string): AlchemySendJsonRpcFunction {\n  return async (request) => {\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: ALCHEMY_HEADERS,\n      body: JSON.stringify(request),\n    });\n    const { status } = response;\n    switch (status) {\n      case 200:\n        return { type: \"jsonrpc\", response: await response.json() };\n      case RATE_LIMIT_STATUS:\n        return { type: \"rateLimit\" };\n      case 0:\n        return {\n          type: \"networkError\",\n          status: 0,\n          message: \"Connection failed.\",\n        };\n      default:\n        return {\n          status,\n          type: \"networkError\",\n          message: (await response.json()).error?.message,\n        };\n    }\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}