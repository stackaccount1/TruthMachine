{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\n/**\n * Helper for converting functions which take a callback as their final argument\n * to functions which return a promise.\n */\n\nexport function promisify(f) {\n  return new Promise(function (resolve, reject) {\n    return f(function (error, result) {\n      if (error != null) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n}\n/**\n * Helper for converting functions which return a promise to functions which\n * take a callback as their final argument.\n */\n\nexport function callWhenDone(promise, callback) {\n  promise.then(function (result) {\n    callback(null, result);\n  }, function (error) {\n    callback(error);\n  });\n}\nexport function delay(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n}\nexport function withTimeout(promise, ms) {\n  return Promise.race([promise, new Promise(function (_, reject) {\n    return setTimeout(function () {\n      return reject(new Error(\"Timeout\"));\n    }, ms);\n  })]);\n}\nvar MIN_RETRY_DELAY = 1000;\nvar RETRY_BACKOFF_FACTOR = 2;\nvar MAX_RETRY_DELAY = 30000;\nexport function withBackoffRetries(f, retryCount, shouldRetry) {\n  if (shouldRetry === void 0) {\n    shouldRetry = function () {\n      return true;\n    };\n  }\n\n  return __awaiter(this, void 0, void 0, function () {\n    var nextWaitTime, i, error_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          nextWaitTime = 0;\n          i = 0;\n          _a.label = 1;\n\n        case 1:\n          if (!true) return [3\n          /*break*/\n          , 7];\n          _a.label = 2;\n\n        case 2:\n          _a.trys.push([2, 4,, 6]);\n\n          return [4\n          /*yield*/\n          , f()];\n\n        case 3:\n          return [2\n          /*return*/\n          , _a.sent()];\n\n        case 4:\n          error_1 = _a.sent();\n          i++;\n\n          if (i >= retryCount || !shouldRetry(error_1)) {\n            throw error_1;\n          }\n\n          return [4\n          /*yield*/\n          , delay(nextWaitTime)];\n\n        case 5:\n          _a.sent();\n\n          if (!shouldRetry(error_1)) {\n            throw error_1;\n          }\n\n          nextWaitTime = nextWaitTime === 0 ? MIN_RETRY_DELAY : Math.min(MAX_RETRY_DELAY, RETRY_BACKOFF_FACTOR * nextWaitTime);\n          return [3\n          /*break*/\n          , 6];\n\n        case 6:\n          return [3\n          /*break*/\n          , 1];\n\n        case 7:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\nexport function makeCancelToken() {\n  var cancelled = false;\n  return {\n    cancel: function () {\n      return cancelled = true;\n    },\n    isCancelled: function () {\n      return cancelled;\n    }\n  };\n}\nexport function throwIfCancelled(isCancelled) {\n  if (isCancelled()) {\n    throw CANCELLED;\n  }\n}\nexport var CANCELLED = new Error(\"Cancelled\");","map":{"version":3,"sources":["../../../src/util/promises.ts"],"names":[],"mappings":"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","sourcesContent":["import { Web3Callback } from \"../types\";\n\n/**\n * Helper for converting functions which take a callback as their final argument\n * to functions which return a promise.\n */\nexport function promisify<T>(\n  f: (callback: Web3Callback<T>) => void,\n): Promise<T> {\n  return new Promise((resolve, reject) =>\n    f((error, result) => {\n      if (error != null) {\n        reject(error);\n      } else {\n        resolve(result!);\n      }\n    }),\n  );\n}\n\n/**\n * Helper for converting functions which return a promise to functions which\n * take a callback as their final argument.\n */\nexport function callWhenDone<T>(\n  promise: Promise<T>,\n  callback: Web3Callback<T>,\n): void {\n  promise.then(\n    (result) => {\n      callback(null, result);\n    },\n    (error) => {\n      callback(error);\n    },\n  );\n}\n\nexport function delay(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport function withTimeout<T>(promise: Promise<T>, ms: number): Promise<T> {\n  return Promise.race([\n    promise,\n    new Promise<T>((_, reject) =>\n      setTimeout(() => reject(new Error(\"Timeout\")), ms),\n    ),\n  ]);\n}\n\nconst MIN_RETRY_DELAY = 1000;\nconst RETRY_BACKOFF_FACTOR = 2;\nconst MAX_RETRY_DELAY = 30000;\n\nexport async function withBackoffRetries<T>(\n  f: () => Promise<T>,\n  retryCount: number,\n  shouldRetry: (error: unknown) => boolean = () => true,\n): Promise<T> {\n  let nextWaitTime = 0;\n  let i = 0;\n  while (true) {\n    try {\n      return await f();\n    } catch (error) {\n      i++;\n      if (i >= retryCount || !shouldRetry(error)) {\n        throw error;\n      }\n      await delay(nextWaitTime);\n      if (!shouldRetry(error)) {\n        throw error;\n      }\n      nextWaitTime =\n        nextWaitTime === 0\n          ? MIN_RETRY_DELAY\n          : Math.min(MAX_RETRY_DELAY, RETRY_BACKOFF_FACTOR * nextWaitTime);\n    }\n  }\n}\n\nexport interface CancelToken {\n  cancel(): void;\n  isCancelled(): boolean;\n}\n\nexport function makeCancelToken(): CancelToken {\n  let cancelled = false;\n  return { cancel: () => (cancelled = true), isCancelled: () => cancelled };\n}\n\nexport function throwIfCancelled(isCancelled: () => boolean): void {\n  if (isCancelled()) {\n    throw CANCELLED;\n  }\n}\n\nexport const CANCELLED = new Error(\"Cancelled\");\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}