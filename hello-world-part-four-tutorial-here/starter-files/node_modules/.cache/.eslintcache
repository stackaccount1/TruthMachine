[{"/home/user/Desktop/TruthMachine/hello-world-part-four-tutorial/starter-files/src/index.js":"1","/home/user/Desktop/TruthMachine/hello-world-part-four-tutorial/starter-files/src/reportWebVitals.js":"2","/home/user/Desktop/TruthMachine/hello-world-part-four-tutorial/starter-files/src/App.js":"3","/home/user/Desktop/TruthMachine/hello-world-part-four-tutorial/starter-files/src/HelloWorld.js":"4","/home/user/Desktop/TruthMachine/hello-world-part-four-tutorial/starter-files/src/util/interact.js":"5"},{"size":500,"mtime":1656174454046,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1656174454046,"results":"8","hashOfConfig":"7"},{"size":182,"mtime":1656174454046,"results":"9","hashOfConfig":"7"},{"size":7446,"mtime":1656211022413,"results":"10","hashOfConfig":"7"},{"size":9331,"mtime":1656208952451,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1sslwvd",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"23","usedDeprecatedRules":"14"},"/home/user/Desktop/TruthMachine/hello-world-part-four-tutorial/starter-files/src/index.js",[],["24","25"],"/home/user/Desktop/TruthMachine/hello-world-part-four-tutorial/starter-files/src/reportWebVitals.js",[],"/home/user/Desktop/TruthMachine/hello-world-part-four-tutorial/starter-files/src/App.js",[],"/home/user/Desktop/TruthMachine/hello-world-part-four-tutorial/starter-files/src/HelloWorld.js",["26","27","28"],"/home/user/Desktop/TruthMachine/hello-world-part-four-tutorial/starter-files/src/util/interact.js",["29","30","31"],"require(\"dotenv\").config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nconst contractABI = require(\"../contract-abi.json\");\nconst contractAddress = \"0x2aa06a5B99b4969AE575cf64E71D32418D045202\";\n\nexport const helloWorldContract = new web3.eth.Contract(\n  contractABI,\n  contractAddress\n);\n\n\nexport const submitTruth = async (address, message, url) => {\n\n    //input error handling\n    if (!window.ethereum || address === null) {\n      return {\n        status:\n          \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\n      };\n    }\n  \n    if (message.trim() === \"\") {\n      return {\n        status: \"❌ Your message cannot be an empty string.\",\n      };\n    }\n  \n    //set up transaction parameters\n    const transactionParameters = {\n      to: contractAddress, // Required except during contract publications.\n      from: address, // must match user's active address.\n      data: helloWorldContract.methods.submitTruth(url, message).encodeABI(),\n    };\n  \n    //sign the transaction\n    try {\n      const txHash = await window.ethereum.request({\n        method: \"eth_sendTransaction\",\n        params: [transactionParameters],\n      });\n      return {\n        status:\"SUCCESS\",\n      };\n    } catch (error) {\n      return {\n        status: \"😥 \" + error.message,\n      };\n    }\n};\n\nexport const mintVoters = async (address, toaddress) => {\n\n  //input error handling\n  if (!window.ethereum || address === null) {\n    return {\n      status:\n        \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\n    };\n  }\n\n  if (toaddress.trim() === \"\") {\n    return {\n      status: \"❌ Your message cannot be an empty string.\",\n    };\n  }\n\n  //set up transaction parameters\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: address, // must match user's active address.\n    data: helloWorldContract.methods.mintVoters(toaddress).encodeABI(),\n  };\n\n  //sign the transaction\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    return {\n      status:\"SUCCESS\",\n      txHash,\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message,\n    };\n  }\n};\n\nexport const voteTruth = async (address, truthid, bool) => {\n\n  //input error handling\n  if (!window.ethereum || address === null) {\n    return {\n      status:\n        \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\n    };\n  }\n\n  if (truthid.trim() === \"\") {\n    return {\n      status: \"❌ Your id cannot be an empty string.\",\n    };\n  }\n\n  //set up transaction parameters\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: address, // must match user's active address.\n    data: helloWorldContract.methods.voteTruth(truthid, bool).encodeABI(),\n  };\n\n  //sign the transaction\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    return {\n      status: \"SUCCESS\",\n      txHash,\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message,\n    };\n  }\n\n};\nexport const tallyVotesVerifyTruth = async (address, truthid) => {\n\n  //input error handling\n  if (!window.ethereum || address === null) {\n    return {\n      status:\n        \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\n    };\n  }\n\n  if (truthid.trim() === \"\") {\n    return {\n      status: \"❌ Your id cannot be an empty string.\",\n    };\n  }\n\n  //set up transaction parameters\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: address, // must match user's active address.\n    data: helloWorldContract.methods.tallyVotesVerifyTruth(truthid).encodeABI(),\n  };\n\n  //sign the transaction\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    return {\n      status: \"SUCCESS\",\n      txHash,\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message,\n    };\n  }\n\n};\n\nexport const returnvotes = async (address, truthid) => {\n\n  //input error handling\n  if (!window.ethereum || address === null) {\n    return {\n      status:\n        \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\n    };\n  }\n\n  if (truthid.trim() === \"\") {\n    return {\n      status: \"❌ Your message cannot be an empty string.\",\n    };\n  }\n\n  //set up transaction parameters\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: address, // must match user's active address.\n    data: helloWorldContract.methods.returnvotes(truthid).encodeABI(),\n  };\n\n  //sign the transaction\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    return {\n      status:\"SUCCESS\",\n      txHash,\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message,\n    };\n  }\n};\n\n//const truth = await helloWorldContract.methods.viewTruth(truthid).call();\n//    return truth;\n\nexport const viewTruth = async (address, truthid) => {\n\n    //input error handling\n    if (!window.ethereum || address === null) {\n      return {\n        status:\n          \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\n      };\n    }\n  \n    if (truthid.trim() === \"\") {\n      return {\n        status: \"❌ Your id cannot be an empty string.\",\n      };\n    }\n  \n    //set up transaction parameters\n    const transactionParameters = {\n      to: contractAddress, // Required except during contract publications.\n      from: address, // must match user's active address.\n      data: helloWorldContract.methods.viewTruth(truthid).encodeABI(),\n    };\n  \n    //sign the transaction\n    try {\n      const txHash = await window.ethereum.request({\n        method: \"eth_sendTransaction\",\n        params: [transactionParameters],\n      });\n      return {\n        status: \"SUCCESS\",\n        txHash,\n      };\n    } catch (error) {\n      return {\n        status: \"😥 \" + error.message,\n      };\n    }\n\n};\n\nexport const viewTitle = async (address, truthid) => {\n\n  //input error handling\n  if (!window.ethereum || address === null) {\n    return {\n      status:\n        \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\n    };\n  }\n\n  if (truthid.trim() === \"\") {\n    return {\n      status: \"❌ Your id cannot be an empty string.\",\n    };\n  }\n\n  //set up transaction parameters\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: address, // must match user's active address.\n    data: helloWorldContract.methods.viewTitle(truthid).encodeABI(),\n  };\n\n  //sign the transaction\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    return {\n      status: \"SUCCESS\",\n      txHash,\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message,\n    };\n  }\n\n};\n\nexport const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const obj = {\n          status: \"👆🏽 Write a message in the text-field above.\",\n          address: addressArray[0],\n        };\n        return obj;\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message,\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: (\n          <span>\n            <p>\n              {\" \"}\n              🦊{\" \"}\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n                You must install Metamask, a virtual Ethereum wallet, in your\n                browser.\n              </a>\n            </p>\n          </span>\n        ),\n      };\n    }\n  };\n  \n  export const getCurrentWalletConnected = async () => {\n    if (window.ethereum) {\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_accounts\",\n        });\n        if (addressArray.length > 0) {\n          return {\n            address: addressArray[0],\n            status: \"👆🏽 Write a message in the text-field above.\",\n          };\n        } else {\n          return {\n            address: \"\",\n            status: \"🦊 Connect to Metamask using the top right button.\",\n          };\n        }\n      } catch (err) {\n        return {\n          address: \"\",\n          status: \"😥 \" + err.message,\n        };\n      }\n    } else {\n      return {\n        address: \"\",\n        status: (\n          <span>\n            <p>\n              {\" \"}\n              🦊{\" \"}\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n                You must install Metamask, a virtual Ethereum wallet, in your\n                browser.\n              </a>\n            </p>\n          </span>\n        ),\n      };\n    }\n  };",{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":30,"column":13,"nodeType":"38","endLine":39,"endColumn":4},{"ruleId":"39","severity":1,"message":"40","line":68,"column":11,"nodeType":"41","messageId":"42","endLine":68,"endColumn":73,"fix":"43"},{"ruleId":"44","severity":1,"message":"45","line":121,"column":7,"nodeType":"41","endLine":121,"endColumn":40},{"ruleId":"46","severity":1,"message":"47","line":40,"column":13,"nodeType":"48","messageId":"49","endLine":40,"endColumn":19},{"ruleId":"39","severity":1,"message":"40","line":325,"column":15,"nodeType":"41","messageId":"42","endLine":325,"endColumn":77,"fix":"50"},{"ruleId":"39","severity":1,"message":"40","line":367,"column":15,"nodeType":"41","messageId":"42","endLine":367,"endColumn":77,"fix":"51"},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"54","text":"55"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-unused-vars","'txHash' is assigned a value but never used.","Identifier","unusedVar",{"range":"56","text":"55"},{"range":"57","text":"55"},"no-global-assign","no-unsafe-negation",[1840,1840]," rel=\"noreferrer\"",[8013,8013],[9082,9082]]