{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/TruthMachine/hello-world-part-four-tutorial/completed/src/util/interact.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire(\"dotenv\").config();\n\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\n\nconst {\n  createAlchemyWeb3\n} = require(\"@alch/alchemy-web3\");\n\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nconst contractABI = require(\"../contract-abi.json\");\n\nconst contractAddress = \"0x6f3f635A9762B47954229Ea479b4541eAF402A6A\";\nexport const helloWorldContract = new web3.eth.Contract(contractABI, contractAddress);\nexport const loadCurrentMessage = async () => {\n  const message = await helloWorldContract.methods.message().call();\n  return message;\n};\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0]\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download.html`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    };\n  }\n};\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\"\n      });\n\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\"\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\"\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", \"\\uD83E\\uDD8A\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n            target: \"_blank\",\n            href: `https://metamask.io/download.html`,\n            children: \"You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    };\n  }\n};\nexport const updateMessage = async (address, message) => {\n  //input error handling\n  if (!window.ethereum || address === null) {\n    return {\n      status: \"💡 Connect your Metamask wallet to update the message on the blockchain.\"\n    };\n  }\n\n  if (message.trim() === \"\") {\n    return {\n      status: \"❌ Your message cannot be an empty string.\"\n    };\n  } //set up transaction parameters\n\n\n  const transactionParameters = {\n    to: contractAddress,\n    // Required except during contract publications.\n    from: address,\n    // must match user's active address.\n    data: helloWorldContract.methods.update(message).encodeABI()\n  }; //sign the transaction\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters]\n    });\n    return {\n      status: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\u2705\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          href: `https://ropsten.etherscan.io/tx/${txHash}`,\n          children: \"View the status of your transaction on Etherscan!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), \"\\u2139\\uFE0F Once the transaction is verified by the network, the message will be updated automatically.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message\n    };\n  }\n};","map":{"version":3,"names":["require","config","alchemyKey","process","env","REACT_APP_ALCHEMY_KEY","createAlchemyWeb3","web3","contractABI","contractAddress","helloWorldContract","eth","Contract","loadCurrentMessage","message","methods","call","connectWallet","window","ethereum","addressArray","request","method","obj","status","address","err","getCurrentWalletConnected","length","updateMessage","trim","transactionParameters","to","from","data","update","encodeABI","txHash","params","error"],"sources":["/home/user/Desktop/TruthMachine/hello-world-part-four-tutorial/completed/src/util/interact.js"],"sourcesContent":["require(\"dotenv\").config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nconst contractABI = require(\"../contract-abi.json\");\nconst contractAddress = \"0x6f3f635A9762B47954229Ea479b4541eAF402A6A\";\n\nexport const helloWorldContract = new web3.eth.Contract(\n  contractABI,\n  contractAddress\n);\n\nexport const loadCurrentMessage = async () => {\n  const message = await helloWorldContract.methods.message().call();\n  return message;\n};\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0],\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\",\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\",\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nexport const updateMessage = async (address, message) => {\n  //input error handling\n  if (!window.ethereum || address === null) {\n    return {\n      status:\n        \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\n    };\n  }\n\n  if (message.trim() === \"\") {\n    return {\n      status: \"❌ Your message cannot be an empty string.\",\n    };\n  }\n  //set up transaction parameters\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: address, // must match user's active address.\n    data: helloWorldContract.methods.update(message).encodeABI(),\n  };\n\n  //sign the transaction\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    return {\n      status: (\n        <span>\n          ✅{\" \"}\n          <a target=\"_blank\" href={`https://ropsten.etherscan.io/tx/${txHash}`}>\n            View the status of your transaction on Etherscan!\n          </a>\n          <br />\n          ℹ️ Once the transaction is verified by the network, the message will\n          be updated automatically.\n        </span>\n      ),\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message,\n    };\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}