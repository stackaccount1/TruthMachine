{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __spreadArray } from \"tslib\";\nimport { fromHex, toHex } from \"../util/hex\";\nimport { throwIfCancelled } from \"../util/promises\";\n/**\n * The maximum number of blocks to backfill. If more than this many blocks have\n * been missed, then we'll sadly miss data, but we want to make sure we don't\n * end up requesting thousands of blocks if somebody left their laptop closed\n * for a week.\n */\n\nvar MAX_BACKFILL_BLOCKS = 120;\n/**\n * The maximum number of requests that can be included in a single batch request.\n * This value is enforced by the backend.\n */\n\nvar MAX_BATCH_SIZE = 10;\nexport function makeBackfiller(jsonRpcSenders) {\n  return {\n    getNewHeadsBackfill: getNewHeadsBackfill,\n    getLogsBackfill: getLogsBackfill\n  };\n\n  function getNewHeadsBackfill(isCancelled, previousHeads, fromBlockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var toBlockNumber, lastSeenBlockNumber, minBlockNumber, reorgHeads, intermediateHeads;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            throwIfCancelled(isCancelled);\n            return [4\n            /*yield*/\n            , getBlockNumber()];\n\n          case 1:\n            toBlockNumber = _a.sent();\n            throwIfCancelled(isCancelled);\n\n            if (previousHeads.length === 0) {\n              return [2\n              /*return*/\n              , getHeadEventsInRange(Math.max(fromBlockNumber, toBlockNumber - MAX_BACKFILL_BLOCKS) + 1, toBlockNumber + 1)];\n            }\n\n            lastSeenBlockNumber = fromHex(previousHeads[previousHeads.length - 1].number);\n            minBlockNumber = Math.max(0, lastSeenBlockNumber - MAX_BACKFILL_BLOCKS);\n\n            if (lastSeenBlockNumber < minBlockNumber) {\n              return [2\n              /*return*/\n              , getHeadEventsInRange(minBlockNumber, toBlockNumber + 1)];\n            }\n\n            return [4\n            /*yield*/\n            , getReorgHeads(isCancelled, previousHeads)];\n\n          case 2:\n            reorgHeads = _a.sent();\n            throwIfCancelled(isCancelled);\n            return [4\n            /*yield*/\n            , getHeadEventsInRange(lastSeenBlockNumber + 1, toBlockNumber + 1)];\n\n          case 3:\n            intermediateHeads = _a.sent();\n            throwIfCancelled(isCancelled);\n            return [2\n            /*return*/\n            , __spreadArray(__spreadArray([], __read(reorgHeads)), __read(intermediateHeads))];\n        }\n      });\n    });\n  }\n\n  function getReorgHeads(isCancelled, previousHeads) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, i, oldEvent, blockHead;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            result = [];\n            i = previousHeads.length - 1;\n            _a.label = 1;\n\n          case 1:\n            if (!(i >= 0)) return [3\n            /*break*/\n            , 4];\n            oldEvent = previousHeads[i];\n            return [4\n            /*yield*/\n            , getBlockByNumber(fromHex(oldEvent.number))];\n\n          case 2:\n            blockHead = _a.sent();\n            throwIfCancelled(isCancelled);\n\n            if (oldEvent.hash === blockHead.hash) {\n              return [3\n              /*break*/\n              , 4];\n            }\n\n            result.push(toNewHeadsEvent(blockHead));\n            _a.label = 3;\n\n          case 3:\n            i--;\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [2\n            /*return*/\n            , result.reverse()];\n        }\n      });\n    });\n  }\n\n  function getHeadEventsInRange(fromBlockInclusive, toBlockExclusive) {\n    return __awaiter(this, void 0, void 0, function () {\n      var batchParts, headEventBatches, i, batchedBlockHeads, blockHeads;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (fromBlockInclusive >= toBlockExclusive) {\n              return [2\n              /*return*/\n              , []];\n            }\n\n            batchParts = [];\n            headEventBatches = [];\n\n            for (i = fromBlockInclusive; i < toBlockExclusive; i++) {\n              batchParts.push({\n                method: \"eth_getBlockByNumber\",\n                params: [toHex(i), false]\n              });\n\n              if (batchParts.length % MAX_BATCH_SIZE === 0) {\n                headEventBatches.push(jsonRpcSenders.sendBatch(batchParts));\n                batchParts = [];\n              }\n            }\n\n            if (batchParts.length > 0) {\n              headEventBatches.push(jsonRpcSenders.sendBatch(batchParts));\n            }\n\n            return [4\n            /*yield*/\n            , Promise.all(headEventBatches)];\n\n          case 1:\n            batchedBlockHeads = _a.sent();\n            blockHeads = batchedBlockHeads.reduce(function (acc, batch) {\n              return acc.concat(batch);\n            }, []);\n            return [2\n            /*return*/\n            , blockHeads.map(toNewHeadsEvent)];\n        }\n      });\n    });\n  }\n\n  function getBlockByNumber(blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , jsonRpcSenders.send(\"eth_getBlockByNumber\", [toHex(blockNumber), false])];\n      });\n    });\n  }\n\n  function getLogsBackfill(isCancelled, filter, previousLogs, fromBlockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var toBlockNumber, lastSeenBlockNumber, minBlockNumber, commonAncestorNumber, removedLogs, addedLogs;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            throwIfCancelled(isCancelled);\n            return [4\n            /*yield*/\n            , getBlockNumber()];\n\n          case 1:\n            toBlockNumber = _a.sent();\n            throwIfCancelled(isCancelled);\n\n            if (previousLogs.length === 0) {\n              return [2\n              /*return*/\n              , getLogsInRange(filter, Math.max(fromBlockNumber, toBlockNumber - MAX_BACKFILL_BLOCKS) + 1, toBlockNumber + 1)];\n            }\n\n            lastSeenBlockNumber = fromHex(previousLogs[previousLogs.length - 1].blockNumber);\n            minBlockNumber = Math.max(0, lastSeenBlockNumber - MAX_BACKFILL_BLOCKS);\n\n            if (lastSeenBlockNumber < minBlockNumber) {\n              return [2\n              /*return*/\n              , getLogsInRange(filter, minBlockNumber, toBlockNumber + 1)];\n            }\n\n            return [4\n            /*yield*/\n            , getCommonAncestorNumber(isCancelled, previousLogs)];\n\n          case 2:\n            commonAncestorNumber = _a.sent();\n            throwIfCancelled(isCancelled);\n            removedLogs = previousLogs.filter(function (log) {\n              return fromHex(log.blockNumber) > commonAncestorNumber;\n            }).map(function (log) {\n              return __assign(__assign({}, log), {\n                removed: true\n              });\n            });\n            return [4\n            /*yield*/\n            , getLogsInRange(filter, commonAncestorNumber + 1, toBlockNumber + 1)];\n\n          case 3:\n            addedLogs = _a.sent();\n            throwIfCancelled(isCancelled);\n            return [2\n            /*return*/\n            , __spreadArray(__spreadArray([], __read(removedLogs)), __read(addedLogs))];\n        }\n      });\n    });\n  }\n\n  function getCommonAncestorNumber(isCancelled, previousLogs) {\n    return __awaiter(this, void 0, void 0, function () {\n      var i, _a, blockHash, blockNumber, hash;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            i = previousLogs.length - 1;\n            _b.label = 1;\n\n          case 1:\n            if (!(i >= 0)) return [3\n            /*break*/\n            , 4];\n            _a = previousLogs[i], blockHash = _a.blockHash, blockNumber = _a.blockNumber;\n            return [4\n            /*yield*/\n            , getBlockByNumber(fromHex(blockNumber))];\n\n          case 2:\n            hash = _b.sent().hash;\n            throwIfCancelled(isCancelled);\n\n            if (blockHash === hash) {\n              return [2\n              /*return*/\n              , fromHex(blockNumber)];\n            }\n\n            _b.label = 3;\n\n          case 3:\n            i--;\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [2\n            /*return*/\n            , Number.NEGATIVE_INFINITY];\n        }\n      });\n    });\n  }\n\n  function getLogsInRange(filter, fromBlockInclusive, toBlockExclusive) {\n    return __awaiter(this, void 0, void 0, function () {\n      var rangeFilter;\n      return __generator(this, function (_a) {\n        if (fromBlockInclusive >= toBlockExclusive) {\n          return [2\n          /*return*/\n          , []];\n        }\n\n        rangeFilter = __assign(__assign({}, filter), {\n          fromBlock: toHex(fromBlockInclusive),\n          toBlock: toHex(toBlockExclusive - 1)\n        });\n        return [2\n        /*return*/\n        , jsonRpcSenders.send(\"eth_getLogs\", [rangeFilter])];\n      });\n    });\n  }\n\n  function getBlockNumber() {\n    return __awaiter(this, void 0, void 0, function () {\n      var blockNumberHex;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , jsonRpcSenders.send(\"eth_blockNumber\")];\n\n          case 1:\n            blockNumberHex = _a.sent();\n            return [2\n            /*return*/\n            , fromHex(blockNumberHex)];\n        }\n      });\n    });\n  }\n}\n\nfunction toNewHeadsEvent(head) {\n  var result = __assign({}, head);\n\n  delete result.totalDifficulty;\n  delete result.transactions;\n  delete result.uncles;\n  return result;\n}\n\nexport function dedupeNewHeads(events) {\n  return dedupe(events, function (event) {\n    return event.hash;\n  });\n}\nexport function dedupeLogs(events) {\n  return dedupe(events, function (event) {\n    return event.blockHash + \"/\" + event.logIndex;\n  });\n}\n\nfunction dedupe(items, getKey) {\n  var keysSeen = new Set();\n  var result = [];\n  items.forEach(function (item) {\n    var key = getKey(item);\n\n    if (!keysSeen.has(key)) {\n      keysSeen.add(key);\n      result.push(item);\n    }\n  });\n  return result;\n}","map":{"version":3,"sources":["../../../src/subscriptions/subscriptionBackfill.ts"],"names":[],"mappings":"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","sourcesContent":["import { fromHex, toHex } from \"../util/hex\";\nimport { BatchPart, JsonRpcSenders } from \"../util/jsonRpc\";\nimport { throwIfCancelled } from \"../util/promises\";\n\nexport interface NewHeadsEvent {\n  author: string;\n  difficulty: string;\n  extraData: string;\n  gasLimit: string;\n  gasUsed: string;\n  hash: string;\n  logsBloom: string;\n  miner: string;\n  mixHash: string;\n  nonce: string;\n  number: string;\n  parentHash: string;\n  receiptsRoot: string;\n  sealFields: string[];\n  sha3Uncles: string;\n  size: string;\n  stateRoot: string;\n  timestamp: string;\n  transactionsRoot: string;\n}\n\n/**\n * The return type of eth_getBlocksByHash.\n */\nexport interface BlockHead extends NewHeadsEvent {\n  totalDifficulty: string;\n  transactions: any[];\n  uncles: string[];\n}\n\nexport interface LogsEvent {\n  address: string;\n  blockHash: string;\n  blockNumber: string;\n  data: string;\n  logIndex: string;\n  topics: string[];\n  transactionHash: string;\n  transactionIndex: string;\n  removed?: boolean;\n}\n\nexport interface LogsSubscriptionFilter {\n  address?: string | string[];\n  topics?: Array<string | string[] | null>;\n}\n\ninterface GetLogsOptions extends LogsSubscriptionFilter {\n  fromBlock?: string;\n  toBlock?: string;\n}\n\nexport type Backfiller = ReturnType<typeof makeBackfiller>;\n\n/**\n * The maximum number of blocks to backfill. If more than this many blocks have\n * been missed, then we'll sadly miss data, but we want to make sure we don't\n * end up requesting thousands of blocks if somebody left their laptop closed\n * for a week.\n */\nconst MAX_BACKFILL_BLOCKS = 120;\n\n/**\n * The maximum number of requests that can be included in a single batch request.\n * This value is enforced by the backend.\n */\nconst MAX_BATCH_SIZE = 10;\n\nexport function makeBackfiller(jsonRpcSenders: JsonRpcSenders) {\n  return { getNewHeadsBackfill, getLogsBackfill };\n\n  async function getNewHeadsBackfill(\n    isCancelled: () => boolean,\n    previousHeads: NewHeadsEvent[],\n    fromBlockNumber: number,\n  ): Promise<NewHeadsEvent[]> {\n    throwIfCancelled(isCancelled);\n    const toBlockNumber = await getBlockNumber();\n    throwIfCancelled(isCancelled);\n    if (previousHeads.length === 0) {\n      return getHeadEventsInRange(\n        Math.max(fromBlockNumber, toBlockNumber - MAX_BACKFILL_BLOCKS) + 1,\n        toBlockNumber + 1,\n      );\n    }\n    const lastSeenBlockNumber = fromHex(\n      previousHeads[previousHeads.length - 1].number,\n    );\n    const minBlockNumber = Math.max(\n      0,\n      lastSeenBlockNumber - MAX_BACKFILL_BLOCKS,\n    );\n    if (lastSeenBlockNumber < minBlockNumber) {\n      return getHeadEventsInRange(minBlockNumber, toBlockNumber + 1);\n    }\n    const reorgHeads: NewHeadsEvent[] = await getReorgHeads(\n      isCancelled,\n      previousHeads,\n    );\n    throwIfCancelled(isCancelled);\n    const intermediateHeads: NewHeadsEvent[] = await getHeadEventsInRange(\n      lastSeenBlockNumber + 1,\n      toBlockNumber + 1,\n    );\n    throwIfCancelled(isCancelled);\n    return [...reorgHeads, ...intermediateHeads];\n  }\n\n  async function getReorgHeads(\n    isCancelled: () => boolean,\n    previousHeads: NewHeadsEvent[],\n  ): Promise<NewHeadsEvent[]> {\n    const result: NewHeadsEvent[] = [];\n    for (let i = previousHeads.length - 1; i >= 0; i--) {\n      const oldEvent = previousHeads[i];\n      const blockHead = await getBlockByNumber(fromHex(oldEvent.number));\n      throwIfCancelled(isCancelled);\n      if (oldEvent.hash === blockHead.hash) {\n        break;\n      }\n      result.push(toNewHeadsEvent(blockHead));\n    }\n    return result.reverse();\n  }\n\n  async function getHeadEventsInRange(\n    fromBlockInclusive: number,\n    toBlockExclusive: number,\n  ): Promise<NewHeadsEvent[]> {\n    if (fromBlockInclusive >= toBlockExclusive) {\n      return [];\n    }\n    let batchParts: BatchPart[] = [];\n    const headEventBatches: Array<Promise<BlockHead[]>> = [];\n    for (let i = fromBlockInclusive; i < toBlockExclusive; i++) {\n      batchParts.push({\n        method: \"eth_getBlockByNumber\",\n        params: [toHex(i), false],\n      });\n      if (batchParts.length % MAX_BATCH_SIZE === 0) {\n        headEventBatches.push(jsonRpcSenders.sendBatch(batchParts));\n        batchParts = [];\n      }\n    }\n\n    if (batchParts.length > 0) {\n      headEventBatches.push(jsonRpcSenders.sendBatch(batchParts));\n    }\n\n    const batchedBlockHeads = await Promise.all(headEventBatches);\n    const blockHeads = batchedBlockHeads.reduce(\n      (acc, batch) => acc.concat(batch),\n      [],\n    );\n    return blockHeads.map(toNewHeadsEvent);\n  }\n\n  async function getBlockByNumber(blockNumber: number): Promise<BlockHead> {\n    return jsonRpcSenders.send(\"eth_getBlockByNumber\", [\n      toHex(blockNumber),\n      false,\n    ]);\n  }\n\n  async function getLogsBackfill(\n    isCancelled: () => boolean,\n    filter: LogsSubscriptionFilter,\n    previousLogs: LogsEvent[],\n    fromBlockNumber: number,\n  ): Promise<LogsEvent[]> {\n    throwIfCancelled(isCancelled);\n    const toBlockNumber = await getBlockNumber();\n    throwIfCancelled(isCancelled);\n    if (previousLogs.length === 0) {\n      return getLogsInRange(\n        filter,\n        Math.max(fromBlockNumber, toBlockNumber - MAX_BACKFILL_BLOCKS) + 1,\n        toBlockNumber + 1,\n      );\n    }\n    const lastSeenBlockNumber = fromHex(\n      previousLogs[previousLogs.length - 1].blockNumber,\n    );\n    const minBlockNumber = Math.max(\n      0,\n      lastSeenBlockNumber - MAX_BACKFILL_BLOCKS,\n    );\n    if (lastSeenBlockNumber < minBlockNumber) {\n      return getLogsInRange(filter, minBlockNumber, toBlockNumber + 1);\n    }\n    const commonAncestorNumber = await getCommonAncestorNumber(\n      isCancelled,\n      previousLogs,\n    );\n    throwIfCancelled(isCancelled);\n    const removedLogs = previousLogs\n      .filter((log) => fromHex(log.blockNumber) > commonAncestorNumber)\n      .map((log) => ({ ...log, removed: true }));\n    const addedLogs = await getLogsInRange(\n      filter,\n      commonAncestorNumber + 1,\n      toBlockNumber + 1,\n    );\n    throwIfCancelled(isCancelled);\n    return [...removedLogs, ...addedLogs];\n  }\n\n  async function getCommonAncestorNumber(\n    isCancelled: () => boolean,\n    previousLogs: LogsEvent[],\n  ): Promise<number> {\n    for (let i = previousLogs.length - 1; i >= 0; i--) {\n      const { blockHash, blockNumber } = previousLogs[i];\n      const { hash } = await getBlockByNumber(fromHex(blockNumber));\n      throwIfCancelled(isCancelled);\n      if (blockHash === hash) {\n        return fromHex(blockNumber);\n      }\n    }\n    return Number.NEGATIVE_INFINITY;\n  }\n\n  async function getLogsInRange(\n    filter: LogsSubscriptionFilter,\n    fromBlockInclusive: number,\n    toBlockExclusive: number,\n  ): Promise<LogsEvent[]> {\n    if (fromBlockInclusive >= toBlockExclusive) {\n      return [];\n    }\n    const rangeFilter: GetLogsOptions = {\n      ...filter,\n      fromBlock: toHex(fromBlockInclusive),\n      toBlock: toHex(toBlockExclusive - 1),\n    };\n    return jsonRpcSenders.send(\"eth_getLogs\", [rangeFilter]);\n  }\n\n  async function getBlockNumber(): Promise<number> {\n    const blockNumberHex: string = await jsonRpcSenders.send(\"eth_blockNumber\");\n    return fromHex(blockNumberHex);\n  }\n}\n\nfunction toNewHeadsEvent(head: BlockHead): NewHeadsEvent {\n  const result: NewHeadsEvent & Partial<BlockHead> = { ...head };\n  delete result.totalDifficulty;\n  delete result.transactions;\n  delete result.uncles;\n  return result;\n}\n\nexport function dedupeNewHeads(events: NewHeadsEvent[]): NewHeadsEvent[] {\n  return dedupe(events, (event) => event.hash);\n}\n\nexport function dedupeLogs(events: LogsEvent[]): LogsEvent[] {\n  return dedupe(events, (event) => `${event.blockHash}/${event.logIndex}`);\n}\n\nfunction dedupe<T>(items: T[], getKey: (item: T) => any): T[] {\n  const keysSeen: Set<any> = new Set();\n  const result: T[] = [];\n  items.forEach((item) => {\n    const key = getKey(item);\n    if (!keysSeen.has(key)) {\n      keysSeen.add(key);\n      result.push(item);\n    }\n  });\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}