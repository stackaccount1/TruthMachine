[{"/home/user/Desktop/TruthMachine/hello-world-part-four-tutorial/completed/src/index.js":"1","/home/user/Desktop/TruthMachine/hello-world-part-four-tutorial/completed/src/reportWebVitals.js":"2","/home/user/Desktop/TruthMachine/hello-world-part-four-tutorial/completed/src/App.js":"3","/home/user/Desktop/TruthMachine/hello-world-part-four-tutorial/completed/src/HelloWorld.js":"4","/home/user/Desktop/TruthMachine/hello-world-part-four-tutorial/completed/src/util/interact.js":"5"},{"size":500,"mtime":1656174454038,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1656174454038,"results":"8","hashOfConfig":"7"},{"size":182,"mtime":1656174454038,"results":"9","hashOfConfig":"7"},{"size":3187,"mtime":1656174454038,"results":"10","hashOfConfig":"7"},{"size":3644,"mtime":1656174454038,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jrlwa6",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"23"},"/home/user/Desktop/TruthMachine/hello-world-part-four-tutorial/completed/src/index.js",[],"/home/user/Desktop/TruthMachine/hello-world-part-four-tutorial/completed/src/reportWebVitals.js",[],"/home/user/Desktop/TruthMachine/hello-world-part-four-tutorial/completed/src/App.js",[],"/home/user/Desktop/TruthMachine/hello-world-part-four-tutorial/completed/src/HelloWorld.js",["24","25","26"],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport {\n  helloWorldContract,\n  connectWallet,\n  updateMessage,\n  loadCurrentMessage,\n  getCurrentWalletConnected,\n} from \"./util/interact.js\";\n\nimport alchemylogo from \"./alchemylogo.svg\";\n\nconst HelloWorld = () => {\n  //state variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [message, setMessage] = useState(\"No connection to the network.\"); //default message\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  //called only once\n  useEffect(async () => {\n    const message = await loadCurrentMessage();\n    setMessage(message);\n    addSmartContractListener();\n\n    const { address, status } = await getCurrentWalletConnected();\n\n    setWallet(address);\n    setStatus(status);\n\n    addWalletListener();\n  }, []);\n\n  function addSmartContractListener() {\n    helloWorldContract.events.UpdatedMessages({}, (error, data) => {\n      if (error) {\n        setStatus(\"😥 \" + error.message);\n      } else {\n        setMessage(data.returnValues[1]);\n        setNewMessage(\"\");\n        setStatus(\"🎉 Your message has been updated!\");\n      }\n    });\n  }\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(\n        <p>\n          {\" \"}\n          🦊{\" \"}\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </p>\n      );\n    }\n  }\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onUpdatePressed = async () => {\n    const { status } = await updateMessage(walletAddress, newMessage);\n    setStatus(status);\n  };\n\n  //the UI of our component\n  return (\n    <div id=\"container\">\n      <img id=\"logo\" src={alchemylogo}></img>\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <h2 style={{ paddingTop: \"50px\" }}>Current Message:</h2>\n      <p>{message}</p>\n\n      <h2 style={{ paddingTop: \"18px\" }}>New Message:</h2>\n\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Update the message in your smart contract.\"\n          onChange={(e) => setNewMessage(e.target.value)}\n          value={newMessage}\n        />\n        <p id=\"status\">{status}</p>\n\n        <button id=\"publish\" onClick={onUpdatePressed}>\n          Update\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default HelloWorld;\n","/home/user/Desktop/TruthMachine/hello-world-part-four-tutorial/completed/src/util/interact.js",["27","28","29"],"require(\"dotenv\").config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nconst contractABI = require(\"../contract-abi.json\");\nconst contractAddress = \"0x6f3f635A9762B47954229Ea479b4541eAF402A6A\";\n\nexport const helloWorldContract = new web3.eth.Contract(\n  contractABI,\n  contractAddress\n);\n\nexport const loadCurrentMessage = async () => {\n  const message = await helloWorldContract.methods.message().call();\n  return message;\n};\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0],\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"👆🏽 Write a message in the text-field above.\",\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\",\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nexport const updateMessage = async (address, message) => {\n  //input error handling\n  if (!window.ethereum || address === null) {\n    return {\n      status:\n        \"💡 Connect your Metamask wallet to update the message on the blockchain.\",\n    };\n  }\n\n  if (message.trim() === \"\") {\n    return {\n      status: \"❌ Your message cannot be an empty string.\",\n    };\n  }\n  //set up transaction parameters\n  const transactionParameters = {\n    to: contractAddress, // Required except during contract publications.\n    from: address, // must match user's active address.\n    data: helloWorldContract.methods.update(message).encodeABI(),\n  };\n\n  //sign the transaction\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    return {\n      status: (\n        <span>\n          ✅{\" \"}\n          <a target=\"_blank\" href={`https://ropsten.etherscan.io/tx/${txHash}`}>\n            View the status of your transaction on Etherscan!\n          </a>\n          <br />\n          ℹ️ Once the transaction is verified by the network, the message will\n          be updated automatically.\n        </span>\n      ),\n    };\n  } catch (error) {\n    return {\n      status: \"😥 \" + error.message,\n    };\n  }\n};\n",{"ruleId":"30","severity":1,"message":"31","line":21,"column":13,"nodeType":"32","endLine":32,"endColumn":4},{"ruleId":"33","severity":1,"message":"34","line":62,"column":11,"nodeType":"35","messageId":"36","endLine":62,"endColumn":73,"fix":"37"},{"ruleId":"38","severity":1,"message":"39","line":85,"column":7,"nodeType":"35","endLine":85,"endColumn":40},{"ruleId":"33","severity":1,"message":"34","line":44,"column":13,"nodeType":"35","messageId":"36","endLine":44,"endColumn":75,"fix":"40"},{"ruleId":"33","severity":1,"message":"34","line":86,"column":13,"nodeType":"35","messageId":"36","endLine":86,"endColumn":75,"fix":"41"},{"ruleId":"33","severity":1,"message":"34","line":128,"column":11,"nodeType":"35","messageId":"36","endLine":128,"endColumn":81,"fix":"42"},"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"43","text":"44"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",{"range":"45","text":"44"},{"range":"46","text":"44"},{"range":"47","text":"44"},[1731,1731]," rel=\"noreferrer\"",[1184,1184],[2169,2169],[3287,3287]]